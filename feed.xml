<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-12-08T10:36:55-08:00</updated><id>/feed.xml</id><title type="html">Swift Software Group</title><subtitle>&amp;copy; Swift Software Group</subtitle><author><name>Swift Software Group</name></author><entry><title type="html">Getting Started with C++ and Visual Studio Code on macOS</title><link href="/getting-started-cpp-visual-studio-code-macos/" rel="alternate" type="text/html" title="Getting Started with C++ and Visual Studio Code on macOS" /><published>2023-10-07T00:00:00-07:00</published><updated>2023-10-07T00:00:00-07:00</updated><id>/getting-started-cpp-visual-studio-code-macos</id><content type="html" xml:base="/getting-started-cpp-visual-studio-code-macos/"><![CDATA[<p>Before going through these steps make sure you have done <a href="/setup-cpp-development-environment-macos">Setup C++ development environment on macOS</a></p>

<h2 id="visual-studio-code">Visual Studio Code</h2>

<p>Download and install from <a href="https://code.visualstudio.com/download">Visual Studio Code</a> site.</p>

<p>Open Visual Studio Code and press <code class="language-plaintext highlighter-rouge">Cmd + Shift + p</code>. Select <code class="language-plaintext highlighter-rouge">Shell Command: Install 'code' command in PATH</code>.</p>

<h2 id="c-project">C++ Project</h2>

<p>Create a directory called simple in <code class="language-plaintext highlighter-rouge">~/cpp/simple</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/cpp/simple
</code></pre></div></div>

<p>Open the directory in Visual Studio Code:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/cpp/simple
code <span class="nb">.</span>
</code></pre></div></div>

<p>Install the <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++ extension</a>.</p>

<h2 id="project-files">Project Files</h2>

<p>Add the following files:</p>

<h3 id="srcmaincpp"><code class="language-plaintext highlighter-rouge">src/main.cpp</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Hello CMake!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cmakeliststxt"><code class="language-plaintext highlighter-rouge">CMakeLists.txt</code></h3>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.20<span class="p">)</span>

<span class="nb">project</span><span class="p">(</span>simple<span class="p">)</span>

<span class="nb">add_executable</span><span class="p">(</span>simple src/main.cpp<span class="p">)</span>
</code></pre></div></div>

<h3 id="buildsh"><code class="language-plaintext highlighter-rouge">build.sh</code></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> ./build/debug
<span class="nb">pushd</span> ./build/debug
    cmake <span class="nt">-G</span> <span class="s1">'Ninja'</span> <span class="nt">-DCMAKE_BUILD_TYPE</span><span class="o">=</span>Debug  ../.. <span class="o">&amp;&amp;</span> <span class="se">\</span>
    ninja
    <span class="nv">ret</span><span class="o">=</span><span class="nv">$?</span>
<span class="nb">popd</span>  
</code></pre></div></div>

<h3 id="gitignore"><code class="language-plaintext highlighter-rouge">.gitignore</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.cache/
build/
</code></pre></div></div>

<h2 id="test-the-build">Test the build</h2>

<p>Open Terminal in Visual Studio Code and test the build from command line:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build.sh
</code></pre></div></div>

<h2 id="automate-the-build">Automate the build</h2>

<p>Add the following Visual Studio Code specific files to the <code class="language-plaintext highlighter-rouge">.vscode</code> subdir:</p>

<h3 id="vscodetasksjson"><code class="language-plaintext highlighter-rouge">.vscode/tasks.json</code></h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tasks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Build"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shell"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"osx"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/build.sh"</span><span class="p">,</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="nl">"group"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"kind"</span><span class="p">:</span><span class="w"> </span><span class="s2">"build"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"isDefault"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Test the build by pressing <code class="language-plaintext highlighter-rouge">Cmd + B</code>. Visual Studio Code should execute the <code class="language-plaintext highlighter-rouge">build.sh</code> script automatically.</p>

<h2 id="setup-debugging">Setup Debugging</h2>

<p>Add the following Visual Studio Code specific files to the <code class="language-plaintext highlighter-rouge">.vscode</code> subdir:</p>

<h3 id="vscodelaunchjson"><code class="language-plaintext highlighter-rouge">.vscode/launch.json</code></h3>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.2.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"configurations"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Launch (gdb)"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cppdbg"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"request"</span><span class="p">:</span><span class="w"> </span><span class="s2">"launch"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"osx"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"program"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/build/debug/simple"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"MIMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lldb"</span><span class="p">,</span><span class="w">
            </span><span class="p">},</span><span class="w">
        </span><span class="p">}</span><span class="w">    
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="test-the-debugging">Test the debugging</h2>

<p>Set a breakpoint on the first line of <code class="language-plaintext highlighter-rouge">int main()</code> inside <code class="language-plaintext highlighter-rouge">src/main.cpp</code>. Press <code class="language-plaintext highlighter-rouge">F5</code> to launch the debugger. It should stop at the breakpoint.</p>]]></content><author><name>Swift Software Group</name></author><category term="vscode" /><category term="c++" /><category term="macos" /><summary type="html"><![CDATA[Before going through these steps make sure you have done Setup C++ development environment on macOS Visual Studio Code Download and install from Visual Studio Code site. Open Visual Studio Code and press Cmd + Shift + p. Select Shell Command: Install 'code' command in PATH.]]></summary></entry><entry><title type="html">Setup C++ development environment on macOS</title><link href="/setup-cpp-development-environment-macos/" rel="alternate" type="text/html" title="Setup C++ development environment on macOS" /><published>2023-09-12T00:00:00-07:00</published><updated>2023-09-12T00:00:00-07:00</updated><id>/setup-cpp-development-environment-macos</id><content type="html" xml:base="/setup-cpp-development-environment-macos/"><![CDATA[<h2 id="homebrew">Homebrew</h2>

<p>Install Homebrew:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="development-tools">Development Tools</h2>

<h3 id="xcode">Xcode</h3>

<p>Install Command Line Tools (CLT) for Xcode:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select <span class="nt">--install</span>
</code></pre></div></div>

<h3 id="cmake">CMake</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>cmake
</code></pre></div></div>

<h3 id="ninja">ninja</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ninja
</code></pre></div></div>

<h2 id="misc">Misc</h2>

<h3 id="finder">Finder</h3>

<p>Show hidden files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>defaults write com.apple.finder AppleShowAllFiles YES
</code></pre></div></div>

<p>Hold the ‘Option/alt’ key, then right click on the Finder icon in the dock and click Relaunch</p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>If you get:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xcode-select: error: <span class="nb">command </span>line tools are already installed, use <span class="s2">"Software Update"</span> to <span class="nb">install </span>updates
</code></pre></div></div>

<p>Try this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>softwareupdate <span class="nt">--all</span> <span class="nt">--install</span> <span class="nt">--force</span>
</code></pre></div></div>

<p>If that doesn’t show you any updates, run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo rm</span> <span class="nt">-rf</span> /Library/Developer/CommandLineTools
 <span class="nb">sudo </span>xcode-select <span class="nt">--install</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="c++" /><category term="macos" /><summary type="html"><![CDATA[Homebrew Install Homebrew: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" Development Tools Xcode Install Command Line Tools (CLT) for Xcode: xcode-select --install CMake brew install cmake ninja brew install ninja Misc Finder Show hidden files: defaults write com.apple.finder AppleShowAllFiles YES Hold the ‘Option/alt’ key, then right click on the Finder icon in the dock and click Relaunch Troubleshooting If you get: xcode-select: error: command line tools are already installed, use "Software Update" to install updates Try this: softwareupdate --all --install --force If that doesn’t show you any updates, run: sudo rm -rf /Library/Developer/CommandLineTools sudo xcode-select --install]]></summary></entry><entry><title type="html">Configure Ruby Environment on Windows</title><link href="/configure-ruby-environment-windows/" rel="alternate" type="text/html" title="Configure Ruby Environment on Windows" /><published>2023-05-27T00:00:00-07:00</published><updated>2023-05-27T00:00:00-07:00</updated><id>/configure-ruby-environment-windows</id><content type="html" xml:base="/configure-ruby-environment-windows/"><![CDATA[<p>This is a simple guide for configuring a Ruby 2 environment on Windows 11. All scripts are PowerShell.</p>

<h2 id="powershell">PowerShell</h2>

<p>This will allow you to execute PowerShell scripts locally on your machine. In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nt">-ExecutionPolicy</span><span class="w"> </span><span class="nx">RemoteSigned</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">LocalMachine</span><span class="w">
</span></code></pre></div></div>

<h2 id="chocolatey">Chocolatey</h2>

<p>In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">AllSigned</span><span class="w">
</span><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">Bypass</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">Process</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="n">iex</span><span class="w"> </span><span class="p">((</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s1">'https://chocolatey.org/install.ps1'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Close and reopen PowerShell after that.</p>

<h3 id="set-cache-directory">Set cache directory</h3>

<p>In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">set</span><span class="w"> </span><span class="nx">cacheLocation</span><span class="w"> </span><span class="nx">C:/ChocoCache</span><span class="w">
</span></code></pre></div></div>

<h3 id="upgrade">Upgrade</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">upgrade</span><span class="w"> </span><span class="nx">chocolatey</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby">Ruby</h2>

<p>In PowerShell as <em>Administrator</em>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">ruby</span><span class="w"> </span><span class="nt">-version</span><span class="w"> </span><span class="nx">2.7.2.1</span><span class="w"> </span><span class="nt">-m</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby-devkit-20">Ruby DevKit (2.0+)</h2>

<h3 id="install">Install</h3>

<p>Open PowerShell as Administrator and run the following command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">ruby2.devkit</span><span class="w">
</span></code></pre></div></div>

<p>This will install Ruby DevKit 2.0+ and its dependencies- in <code class="language-plaintext highlighter-rouge">C:\tools\DevKit2</code>.</p>

<h3 id="configure">Configure</h3>

<p>Open <code class="language-plaintext highlighter-rouge">C:\tools\DevKit2\config.yml</code>and add <code class="language-plaintext highlighter-rouge">C:\tools\ruby27</code> path at the end. The complete <code class="language-plaintext highlighter-rouge">config.yml</code> should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This configuration file contains the absolute path locations of all
# installed Rubies to be enhanced to work with the DevKit. This config
# file is generated by the 'ruby dk.rb init' step and may be modified
# before running the 'ruby dk.rb install' step. To include any installed
# Rubies that were not automagically discovered, simply add a line below
# the triple hyphens with the absolute path to the Ruby root directory.
#
# Example:
#
# ---
# - C:/ruby19trunk
# - C:/ruby192dev
#
---
 - C:/tools/ruby27
</code></pre></div></div>

<p>Run the DevKit installer:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">C:/tools/DevKit2</span><span class="w">
</span><span class="n">ruby</span><span class="w"> </span><span class="nx">dk.rb</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby-version-manager">Ruby Version Manager</h2>

<p>Download latest uru.x.y.z.nupkg from <a href="https://bitbucket.org/jonforums/uru/downloads">uru’s downloads</a>. This was <code class="language-plaintext highlighter-rouge">uru.0.8.5.nupkg</code> at the time of writing.</p>

<p>In PowerShell as <em>Administrator</em>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">~/Downloads</span><span class="w">
</span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"https://bitbucket.org/jonforums/uru/downloads/uru.0.8.5.nupkg"</span><span class="w"> </span><span class="nt">-outfile</span><span class="w"> </span><span class="s2">"uru.0.8.5.nupkg"</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">uru.0.8.5.nupkg</span><span class="w">
</span></code></pre></div></div>

<h3 id="register-ruby-versions">Register Ruby Versions</h3>

<p>This will work only if you previously have installed Ruby via Chocolatey.</p>

<p>In PowerShell:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uru</span><span class="w"> </span><span class="nx">admin</span><span class="w"> </span><span class="nx">rm</span><span class="w"> </span><span class="nt">--all</span><span class="w">
</span><span class="n">uru</span><span class="w"> </span><span class="nx">admin</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nt">--recurse</span><span class="w"> </span><span class="nx">C:\tools</span><span class="w">
</span></code></pre></div></div>

<p>Test:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uru</span><span class="w"> </span><span class="nx">ls</span><span class="w">
</span></code></pre></div></div>

<h3 id="install-ruby-native-environment">Install Ruby Native Environment</h3>

<p>This is needed for gems that requre antive compilation.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># activate Ruby 2.7</span><span class="w">
</span><span class="n">uru</span><span class="w"> </span><span class="nx">2.7.2</span><span class="w">

</span><span class="c"># use a recent MSYS2 version</span><span class="w">
</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">MSYS2_VERSION</span><span class="o">=</span><span class="s2">"20230526"</span><span class="w">

</span><span class="c"># install</span><span class="w">
</span><span class="n">ridk</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span></code></pre></div></div>

<p>A list of the available MSYS2 versions is available <a href="https://repo.msys2.org/distrib/x86_64/">here</a>.</p>]]></content><author><name>Swift Software Group</name></author><category term="ruby" /><category term="windows" /><summary type="html"><![CDATA[This is a simple guide for configuring a Ruby 2 environment on Windows 11. All scripts are PowerShell. PowerShell This will allow you to execute PowerShell scripts locally on your machine. In PowerShell as Administrator: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine]]></summary></entry><entry><title type="html">Run MongoDB with Podman</title><link href="/run-mongodb-with-podman/" rel="alternate" type="text/html" title="Run MongoDB with Podman" /><published>2023-05-23T00:00:00-07:00</published><updated>2023-05-23T00:00:00-07:00</updated><id>/run-mongodb-with-podman</id><content type="html" xml:base="/run-mongodb-with-podman/"><![CDATA[<p>Before you start install <a href="/setup-podman-macos">Podman</a>.</p>

<h2 id="set-machine-to-rootful">Set machine to <code class="language-plaintext highlighter-rouge">rootful</code></h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine stop
podman machine <span class="nb">set</span> <span class="nt">--rootful</span>
podman machine start
</code></pre></div></div>

<h2 id="create-a-data-directory">Create a data directory</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> ~/podman/mongo/data/db
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/podman/mongo/data/db
<span class="nb">chmod</span> <span class="nt">-R</span> a+wxr ~/podman
</code></pre></div></div>

<h2 id="setup-mongodb-authentication">Setup MongoDB Authentication</h2>

<p>First run the MongoDb container without authentication:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run <span class="se">\</span>
    <span class="nt">--detach</span> <span class="se">\</span>
    <span class="nt">--tty</span> <span class="se">\</span>
    <span class="nt">--user</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">--user</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">--group</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--name</span> mongo-dev <span class="se">\</span>
    <span class="nt">--publish</span> 27017:27017 <span class="se">\</span>
    <span class="nt">--volume</span> ~/podman/mongo/data/db:/data/db <span class="se">\</span>
    mongo
</code></pre></div></div>

<p>Start a shell in the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman <span class="nb">exec</span> <span class="nt">-it</span> mongo-dev bash
</code></pre></div></div>

<p>In the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mongosh

<span class="c"># in mongo shell now</span>
use admin
db.createUser<span class="o">({</span>user:<span class="s2">"test"</span>, <span class="nb">pwd</span>:<span class="s2">"test"</span>, roles:[<span class="o">{</span>role:<span class="s2">"root"</span>, db:<span class="s2">"admin"</span><span class="o">}]})</span>
<span class="nb">exit

exit</span>
</code></pre></div></div>

<h2 id="restart-mongodb-with-authentication">Restart MongoDB with Authentication</h2>

<p>Stop and remove the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman stop mongo-dev
podman <span class="nb">rm </span>mongo-dev
</code></pre></div></div>

<p>Start the container with authentication:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run <span class="se">\</span>
    <span class="nt">--detach</span> <span class="se">\</span>
    <span class="nt">--tty</span> <span class="se">\</span>
    <span class="nt">--user</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">--user</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">--group</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--name</span> mongo-dev <span class="se">\</span>
    <span class="nt">--publish</span> 27017:27017 <span class="se">\</span>
    <span class="nt">--volume</span> ~/podman/mongo/data/db:/data/db <span class="se">\</span>
    mongo <span class="nt">--auth</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="podman" /><category term="mongodb" /><summary type="html"><![CDATA[Before you start install Podman. Set machine to rootful podman machine stop podman machine set --rootful podman machine start]]></summary></entry><entry><title type="html">Setup Podman on macOS</title><link href="/setup-podman-macos/" rel="alternate" type="text/html" title="Setup Podman on macOS" /><published>2023-05-22T00:00:00-07:00</published><updated>2023-05-22T00:00:00-07:00</updated><id>/setup-podman-macos</id><content type="html" xml:base="/setup-podman-macos/"><![CDATA[<p>Podman is a utility that can be used to create and maintain containers. This post will teach you how to set up Podman on macOS and perform some basic commands.</p>

<h2 id="preparation">Preparation</h2>

<h3 id="homebrew">Homebrew</h3>

<p>Install <a href="https://brew.sh/">Homebrew</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="bash-5">bash 5</h3>

<p>Install via Homebrew:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>bash
</code></pre></div></div>

<h2 id="podman">Podman</h2>

<p>Install via Homebrew:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>podman
</code></pre></div></div>

<h2 id="podman-machine">Podman Machine</h2>

<p>Create and start your first Podman machine (2 CPUs, 100GB disk, 4GB memory). Podman machines are backed by <a href="https://www.qemu.org/">QEMU</a>. This will become the default Podman machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine init <span class="nt">--cpus</span> 2 <span class="nt">--disk-size</span> 100 <span class="nt">--memory</span> 4096
</code></pre></div></div>

<p>List all machines:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine <span class="nb">ls</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                     VM TYPE     CREATED             LAST UP             CPUS        MEMORY      DISK SIZE
podman-machine-default*  qemu        About a minute ago  About a minute ago  2           4.295GB     107.4GB
</code></pre></div></div>

<p>Start the default machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine start
</code></pre></div></div>

<p>Verify the installation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman info
</code></pre></div></div>

<p>The machine will be configured in rootless mode. If your containers require root permissions (e.g. ports &lt; 1024), or if you run into compatibility issues with non-podman clients, you can switch using the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine <span class="nb">set</span> <span class="nt">--rootful</span>
</code></pre></div></div>

<h2 id="test">Test</h2>

<p>Run the <code class="language-plaintext highlighter-rouge">Hello World</code> container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run hello-world
</code></pre></div></div>

<h2 id="podman-desktop">Podman Desktop</h2>

<p>To start a podman machine automatically at login, also install the Podman Desktop:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install</span> <span class="nt">--cask</span> podman-desktop
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="podman" /><category term="macos" /><summary type="html"><![CDATA[Podman is a utility that can be used to create and maintain containers. This post will teach you how to set up Podman on macOS and perform some basic commands.]]></summary></entry><entry><title type="html">Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 5 - Worker Launch Template</title><link href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template/" rel="alternate" type="text/html" title="Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 5 - Worker Launch Template" /><published>2021-08-11T00:00:00-07:00</published><updated>2021-08-11T00:00:00-07:00</updated><id>/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template</id><content type="html" xml:base="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template/"><![CDATA[<p>In this step we will create the a launch templat for the  EC2 Worker instances.</p>

<p>This post is part of a thread that includes these steps:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage">Storage</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Roles</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Manager Instance</a></li>
  <li>Worker Launch Template (this post)</li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup">Cleanup</a></li>
</ol>

<h1 id="worker-launch-template">Worker Launch Template</h1>

<p>Start in the project directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/swift-aws-ec2-swarm
</code></pre></div></div>

<h3 id="cloud-formation-template">cloud-formation Template</h3>

<p>Create a folder <code class="language-plaintext highlighter-rouge">ec2-worker-lt</code> and a <code class="language-plaintext highlighter-rouge">ec2-worker-lt.yml</code> file in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ec2-worker-lt
<span class="nb">touch </span>ec2-worker-lt/ec2-worker-lt.yml
nano ec2-worker-lt/ec2-worker-lt.yml
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">ec2-worker-lt.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Description</span><span class="pi">:</span> <span class="s">Launch template for Docker Swarm worker instances</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">LatestAmiId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt;</span>
    <span class="na">Default</span><span class="pi">:</span> <span class="s">/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2</span>

  <span class="na">HostedZoneId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::Route53::HostedZone::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">ID of the Route53 HostedZone</span>

  <span class="na">HomeVolumeId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::Volume::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">ID of the volume to be mounted as /home</span>

<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">LaunchTemplate</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::LaunchTemplate</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">LaunchTemplateData</span><span class="pi">:</span>
        <span class="na">ImageId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">LatestAmiId</span>

        <span class="na">BlockDeviceMappings</span><span class="pi">:</span> 
          <span class="c1"># Docker volume</span>
          <span class="pi">-</span> <span class="na">DeviceName</span><span class="pi">:</span> <span class="s">/dev/sdi</span>
            <span class="na">Ebs</span><span class="pi">:</span> 
              <span class="na">Encrypted</span><span class="pi">:</span> <span class="no">true</span>
              <span class="na">DeleteOnTermination</span><span class="pi">:</span> <span class="no">true</span>
              <span class="na">VolumeSize</span><span class="pi">:</span> <span class="m">100</span>
              <span class="na">VolumeType</span><span class="pi">:</span> <span class="s">gp2</span>          

        <span class="na">UserData</span><span class="pi">:</span>
          <span class="s">Fn::Base64:</span>
            <span class="s">!Sub |</span>
              <span class="s">#!/bin/bash -x</span>

              <span class="s"># !!! DO NOT ENABLE THIS !!! Use in case of boot problems only</span>
              <span class="s"># usermod --password $(echo test123 | openssl passwd -1 -stdin) ec2-user</span>

              <span class="s"># see</span><span class="err">:</span> <span class="s">https://aws.amazon.com/premiumsupport/knowledge-center/ec2-linux-log-user-data/</span>
              <span class="s">exec &gt; &gt;(tee /var/log/user-data.log|logger -t user-data -s 2&gt;/dev/console) 2&gt;&amp;1</span>

              <span class="s">EC2_INSTANCE_ID=$(ec2-metadata --instance-id | awk '{print $2}')</span>
              <span class="s">EC2_REGION=$(ec2-metadata --availability-zone | awk '{print $2}' | sed 's/.$//')</span>

              <span class="s">## Timezone</span>
              <span class="s"># see</span><span class="err">:</span> <span class="s">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html#change_time_zone</span>
              <span class="s">timedatectl set-timezone America/Los_Angeles</span>

              <span class="s">## DNS</span>
              <span class="s">PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)</span>
              <span class="s">DNS_NAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$EC2_INSTANCE_ID" "Name=key,Values=Name" --region $EC2_REGION --output=text | cut -f5)</span>
              <span class="s">aws route53 change-resource-record-sets --hosted-zone-id ${HostedZoneId} --change-batch '{</span>
                <span class="s">"Changes"</span><span class="err">:</span> <span class="pi">[</span>
                  <span class="pi">{</span>
                    <span class="s2">"</span><span class="s">Action"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">UPSERT"</span><span class="pi">,</span>
                    <span class="s2">"</span><span class="s">ResourceRecordSet"</span><span class="pi">:</span> <span class="pi">{</span>
                      <span class="s2">"</span><span class="s">Name"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">'$DNS_NAME'.swift.internal."</span><span class="pi">,</span>
                      <span class="s2">"</span><span class="s">Type"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">A"</span><span class="pi">,</span>
                      <span class="s2">"</span><span class="s">TTL"</span><span class="pi">:</span> <span class="nv">60</span><span class="pi">,</span>
                      <span class="s2">"</span><span class="s">ResourceRecords"</span><span class="pi">:</span> <span class="pi">[</span>
                        <span class="pi">{</span>
                          <span class="s2">"</span><span class="s">Value"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">'$PRIVATE_IP'"</span>
                        <span class="pi">}</span>
                      <span class="pi">]</span>
                    <span class="pi">}</span>
                  <span class="pi">}</span>
                <span class="pi">]</span>
              <span class="err">}</span><span class="s1">'</span>

              <span class="s">#</span><span class="nv"> </span><span class="s">Add</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">.swift.internal</span><span class="nv"> </span><span class="s">domain</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">searchable</span><span class="nv"> </span><span class="s">domains</span>
              <span class="s">echo</span><span class="nv"> </span><span class="s">search</span><span class="nv"> </span><span class="s">swift.internal</span><span class="nv"> </span><span class="s">&gt;&gt;</span><span class="nv"> </span><span class="s">/etc/resolv.conf</span>

              <span class="s">#</span><span class="nv"> </span><span class="s">Amazon</span><span class="nv"> </span><span class="s">Linux</span><span class="nv"> </span><span class="s">specific</span><span class="nv"> </span><span class="s">hack</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">preserve</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">domain</span><span class="nv"> </span><span class="s">search</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">between</span><span class="nv"> </span><span class="s">reboots</span>
              <span class="s">echo</span><span class="nv"> </span><span class="s">'prepend domain-search "swift.internal";' &gt;&gt; /etc/dhcp/dhclient.conf</span>

              <span class="s">## Hostname</span>
              <span class="s"># Change hostname to the DNS NAME, which in turn is the name tag of the instance</span> 
              <span class="s">hostnamectl set-hostname $DNS_NAME.swift.internal</span>

              <span class="s"># Amazon EC2 specific hack to preserve hostname between reboots</span>
              <span class="s">echo 'preserve_hostname</span><span class="err">:</span> <span class="no">true</span><span class="s">' &gt;&gt; /etc/cloud/cloud.cfg</span>


              <span class="s">## Attach the EBS volumes</span>
              <span class="s"># see</span><span class="err">:</span> <span class="s">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html</span>

              <span class="s"># Home</span>
              <span class="s">aws ec2 attach-volume --region $EC2_REGION --instance-id $EC2_INSTANCE_ID --volume-id ${HomeVolumeId} --device /dev/sdh</span>
              <span class="s">while [ ! -e /dev/sdh ]; do</span> 
                <span class="s">echo Waiting for Home EBS volume to attach</span>
                <span class="s">sleep </span><span class="m">30</span>
              <span class="s">done</span>

              <span class="s"># Docker</span>
              <span class="s"># Docker volume is already attached as /dev/sdi</span>


              <span class="s">## Format EBS volumes</span>
              <span class="s"># Check if formatted and if not, format using ext4</span>

              <span class="s"># Home</span>
              <span class="s"># Home volume is shared between manager and worker nodes</span>

              <span class="s"># Docker</span>
              <span class="s"># Docker volume is not shared. Each instance has its own Docker volume</span> 
              <span class="s">device_fs_type=`file -sL /dev/sdi`</span>
              <span class="s">if [[ $device_fs_type != *"ext4"* ]]; then</span>
                  <span class="s">mkfs --type ext4 /dev/sdi</span>
              <span class="s">fi</span>              


              <span class="s">## Mount EBS file systems</span>
              
              <span class="s"># home</span>
              <span class="s">mkdir -p /ebs/home</span>
              <span class="s">echo '/dev/sdh /ebs/home ext4 defaults,nofail 0 2' | tee -a /etc/fstab</span>
              
              <span class="s"># docker</span>
              <span class="s">mkdir -p /ebs/docker</span>
              <span class="s">echo '/dev/sdi /ebs/docker ext4 defaults,nofail 0 2' | tee -a /etc/fstab</span>
              
              <span class="s">mount --all</span>


              <span class="s">## Users</span>

              <span class="s"># add users</span>
              <span class="s"># runner</span>
              <span class="s">groupadd --gid 200000 runner</span> 
              <span class="s">useradd --gid runner --uid 200000  runner</span>

              <span class="s"># worker</span>
              <span class="s">useradd --create-home --home-dir /ebs/home/worker worker</span>

              <span class="s"># install software</span>
              <span class="s">yum update -y</span>
              <span class="s">yum install docker git jq htop -y</span>


              <span class="s">## Docker config</span>
              <span class="s">#see</span><span class="err">:</span> <span class="s">https://docs.docker.com/engine/security/userns-remap/</span>

              <span class="s"># - Use `/ebs/docker` as data-root (for containers and volumes)</span>
              <span class="s"># - Map container `root` user to host `runner` user</span>             
              <span class="s">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span>
              <span class="s">{</span>
                <span class="s">"data-root"</span><span class="err">:</span> <span class="s2">"</span><span class="s">/ebs/docker"</span><span class="err">,</span>
                <span class="s2">"</span><span class="s">userns-remap"</span><span class="err">:</span> <span class="s2">"</span><span class="s">runner"</span>
              <span class="err">}</span>            
              <span class="s">EOF</span>

              <span class="s"># additional config needed for the Docker user namespace mapping</span>
              <span class="s">touch /etc/subuid /etc/subgid</span>
              <span class="s">echo "runner:$(id -u runner):65536" | sudo tee -a /etc/subuid</span>
              <span class="s">echo "runner:$(id -g runner):65536" | sudo tee -a /etc/subgid</span>

              <span class="s"># Enable Docker to run at boot and start it</span>
              <span class="s">systemctl enable docker</span>
              <span class="s">systemctl start docker</span>

              <span class="s"># add users to the docker group</span>
              <span class="s">usermod --append --groups docker ec2-user</span>
              <span class="s">usermod --append --groups docker worker</span>

              <span class="s"># download and install docker compose (optional)</span>
              <span class="s"># platform=$(uname -s)-$(uname -m)</span>
              <span class="s"># wget https://github.com/docker/compose/releases/latest/download/docker-compose-$platform</span> 
              <span class="s"># mv docker-compose-$platform /usr/local/bin/docker-compose</span>
              <span class="s"># chmod -v +x /usr/local/bin/docker-compose</span> 

              <span class="s">## Install AWS CLI v2</span>
              <span class="s">curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"</span>
              <span class="s">unzip awscliv2.zip</span>
              <span class="s">./aws/install</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">LaunchTemplateId</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Launch template ID</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">LaunchTemplate</span>
</code></pre></div></div>

<h2 id="scripts">Scripts</h2>

<p>Add a script <code class="language-plaintext highlighter-rouge">deploy-ec2-worker-lt.sh</code> and paste this code in it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Deploying </span><span class="nv">$stack_ec2_worker_lt</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

</span><span class="nv">hosted_zone_id</span><span class="o">=</span><span class="si">$(</span>aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "HostedZoneId") | .OutputValue'</span><span class="si">)</span>

<span class="c"># home volume is shared between manager and worker(s)</span>
<span class="nv">home_volume_id</span><span class="o">=</span><span class="si">$(</span>aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_ebs</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "HomeVolumeId") | .OutputValue'</span><span class="si">)</span>

<span class="nb">set</span> <span class="nt">-x</span>

aws cloudformation deploy <span class="se">\</span>
    <span class="nt">--template-file</span> ec2-worker-lt/ec2-worker-lt.yml <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_worker_lt</span> <span class="se">\</span>
    <span class="nt">--parameter-overrides</span> <span class="se">\</span>
        <span class="nv">HostedZoneId</span><span class="o">=</span><span class="nv">$hosted_zone_id</span> <span class="se">\</span>
        <span class="nv">HomeVolumeId</span><span class="o">=</span><span class="nv">$home_volume_id</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Let’s also add a clean up script <code class="language-plaintext highlighter-rouge">rm-ec2-worker-lt.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Destroying </span><span class="nv">$stack_ec2_worker_lt</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation delete-stack <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_worker_lt</span>

aws cloudformation <span class="nb">wait </span>stack-delete-complete <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_worker_lt</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Make the scripts executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ec2-worker-lt/deploy-ec2-worker-lt.sh 
<span class="nb">chmod</span> +x ec2-worker-lt/rm-ec2-worker-lt.sh
</code></pre></div></div>

<h3 id="deploy">Deploy</h3>

<p>Finally let’s run the “deploy” script to create the Worker launch template:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ec2-worker-lt/deploy-ec2-worker-lt.sh
</code></pre></div></div>

<p>You should see output similar to this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deploying swift-swarm-ec2-worker-lt stack via cloud-formation:
https://us-west-2.console.aws.amazon.com/cloudformation/home

+ aws cloudformation deploy <span class="nt">--profile</span> swift <span class="nt">--template-file</span> ec2-worker/ec2-worker-lt.yml <span class="nt">--stack-name</span> swift-swarm-ec2-worker-lt <span class="nt">--parameter-overrides</span> <span class="nv">HostedZoneId</span><span class="o">=</span>Z07362313E0WMP6Y4DBYT <span class="nv">HomeVolumeId</span><span class="o">=</span>vol-08b4fb87713440e48

Waiting <span class="k">for </span>changeset to be created..
Waiting <span class="k">for </span>stack create/update to <span class="nb">complete
</span>Successfully created/updated stack - swift-swarm-ec2-worker-lt
</code></pre></div></div>

<p>At this point your project structure should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── config
│   └── names.sh
├── ebs
│   ├── deploy-ebs.sh
│   ├── ebs.yml
│   └── rm-ebs.sh
├── ec2-manager
│   ├── deploy-ec2-manager.sh
│   ├── ec2-manager.yml
│   └── rm-ec2-manager.sh
├── ec2-worker-lt
│   ├── deploy-ec2-worker-lt.sh
│   ├── ec2-worker-lt.yml
│   └── rm-ec2-worker-lt.sh
├── iam
│   ├── deploy-iam-manager.sh
│   ├── deploy-iam-worker.sh
│   ├── iam-manager.yml
│   ├── iam-worker.yml
│   ├── rm-iam-manager.sh
│   └── rm-iam-worker.sh
├── ssh
│   └── ssh-manager.sh
└── vpc
    ├── deploy-vpc.sh
    ├── rm-vpc.sh
    └── vpc.yml
</code></pre></div></div>

<p>Congratulations!</p>

<p>We are done with <code class="language-plaintext highlighter-rouge">Step 5. Worker Launch Template</code>.</p>

<p>Next step is: <a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Step 6. Worker Instances</a></p>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><category term="ec2" /><category term="cloud-formation" /><category term="docker" /><category term="docker-swarm" /><summary type="html"><![CDATA[In this step we will create the a launch templat for the EC2 Worker instances. This post is part of a thread that includes these steps: Network Setup Storage Roles Manager Instance Worker Launch Template (this post) Worker Instances Docker Swarm Cleanup]]></summary></entry><entry><title type="html">Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 4 - Manager Instance</title><link href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance/" rel="alternate" type="text/html" title="Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 4 - Manager Instance" /><published>2021-08-11T00:00:00-07:00</published><updated>2021-08-11T00:00:00-07:00</updated><id>/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance</id><content type="html" xml:base="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance/"><![CDATA[<p>In this step we will configure and launch the Manager EC2 instance.</p>

<p>This post is part of a thread that includes these steps:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage">Storage</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Roles</a></li>
  <li>Manager Instance (this post)</li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Worker Launch Template</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup">Cleanup</a></li>
</ol>

<h1 id="manager-instance-aws-ec2">Manager Instance (AWS EC2)</h1>

<p>Start in the project directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/swift-aws-ec2-swarm
</code></pre></div></div>

<h3 id="cloud-formation-template">cloud-formation Template</h3>

<p>Create a folder <code class="language-plaintext highlighter-rouge">ec2-manager</code> and a <code class="language-plaintext highlighter-rouge">ec2-manager.yml</code> file in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ec2-manager
<span class="nb">touch </span>ec2-manager/ec2-manager.yml
nano ec2-manager/ec2-manager.yml
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">ec2-manager.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Description</span><span class="pi">:</span> <span class="s">Docker Swarm Manager instance</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">KeyPair</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::KeyPair::KeyName</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Key pair that will be used to launch instances</span>

  <span class="na">SubnetId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::Subnet::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Subnet in the VPC where the instance will be launched</span>

  <span class="na">SecurityGroupId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::SecurityGroup::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Security group for the instance</span>

  <span class="na">InstanceProfile</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Instance profile to use for the instance</span>

  <span class="na">InstanceType</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>
    <span class="na">Default</span><span class="pi">:</span> <span class="s">c5.large</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">Instance type to use for the instance</span>

  <span class="na">LatestAmiId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::SSM::Parameter::Value&lt;AWS::EC2::Image::Id&gt;</span>
    <span class="na">Default</span><span class="pi">:</span> <span class="s">/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2</span>

  <span class="na">HostedZoneId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::Route53::HostedZone::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">ID of the Route53 HostedZone</span>

  <span class="na">HomeVolumeId</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::Volume::Id</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">ID of the volume to be mounted as /home</span>

<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">Instance</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::EC2::Instance</span>
    <span class="na">Properties</span><span class="pi">:</span> 
      <span class="na">KeyName</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">KeyPair</span>

      <span class="na">SubnetId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">SubnetId</span>
      <span class="na">SecurityGroupIds</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="kt">!Ref</span> <span class="s">SecurityGroupId</span>      

      <span class="na">IamInstanceProfile</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">InstanceProfile</span>

      <span class="na">InstanceType</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">InstanceType</span>

      <span class="na">ImageId</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">LatestAmiId</span>

      <span class="na">BlockDeviceMappings</span><span class="pi">:</span> 
        <span class="c1"># Docker volume</span>
        <span class="pi">-</span> <span class="na">DeviceName</span><span class="pi">:</span> <span class="s">/dev/sdi</span>
          <span class="na">Ebs</span><span class="pi">:</span> 
            <span class="na">Encrypted</span><span class="pi">:</span> <span class="no">true</span>
            <span class="na">DeleteOnTermination</span><span class="pi">:</span> <span class="no">true</span>
            <span class="na">VolumeSize</span><span class="pi">:</span> <span class="m">100</span>
            <span class="na">VolumeType</span><span class="pi">:</span> <span class="s">gp2</span>          

      <span class="c1"># tags:</span>
        <span class="pi">-</span> <span class="na">Key</span><span class="pi">:</span> <span class="s">Name</span>
          <span class="na">Value</span><span class="pi">:</span> <span class="s">manager</span>

      <span class="na">UserData</span><span class="pi">:</span>
        <span class="s">Fn::Base64:</span>
          <span class="s">!Sub |</span>
            <span class="s">#!/bin/bash -xe</span>

            <span class="s"># see</span><span class="err">:</span> <span class="s">https://aws.amazon.com/premiumsupport/knowledge-center/ec2-linux-log-user-data/</span>
            <span class="s">exec &gt; &gt;(tee /var/log/user-data.log|logger -t user-data -s 2&gt;/dev/console) 2&gt;&amp;1</span>

            <span class="s">EC2_INSTANCE_ID=$(ec2-metadata --instance-id | awk '{print $2}')</span>
            <span class="s">EC2_REGION=$(ec2-metadata --availability-zone | awk '{print $2}' | sed 's/.$//')</span>

            <span class="s">## Timezone</span>
            <span class="s"># see</span><span class="err">:</span> <span class="s">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/set-time.html#change_time_zone</span>
            <span class="s">timedatectl set-timezone America/Los_Angeles</span>

            <span class="s">## DNS</span>
            <span class="s">PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)</span>
            <span class="s">DNS_NAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$EC2_INSTANCE_ID" "Name=key,Values=Name" --region $EC2_REGION --output=text | cut -f5)</span>
            <span class="s">aws route53 change-resource-record-sets --hosted-zone-id ${HostedZoneId} --change-batch '{</span>
              <span class="s">"Changes"</span><span class="err">:</span> <span class="pi">[</span>
                <span class="pi">{</span>
                  <span class="s2">"</span><span class="s">Action"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">UPSERT"</span><span class="pi">,</span>
                  <span class="s2">"</span><span class="s">ResourceRecordSet"</span><span class="pi">:</span> <span class="pi">{</span>
                    <span class="s2">"</span><span class="s">Name"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">'$DNS_NAME'.swift.internal."</span><span class="pi">,</span>
                    <span class="s2">"</span><span class="s">Type"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">A"</span><span class="pi">,</span>
                    <span class="s2">"</span><span class="s">TTL"</span><span class="pi">:</span> <span class="nv">60</span><span class="pi">,</span>
                    <span class="s2">"</span><span class="s">ResourceRecords"</span><span class="pi">:</span> <span class="pi">[</span>
                      <span class="pi">{</span>
                        <span class="s2">"</span><span class="s">Value"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">'$PRIVATE_IP'"</span>
                      <span class="pi">}</span>
                    <span class="pi">]</span>
                  <span class="pi">}</span>
                <span class="pi">}</span>
              <span class="pi">]</span>
            <span class="err">}</span><span class="s1">'</span>

            <span class="s">#</span><span class="nv"> </span><span class="s">Add</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">.swift.internal</span><span class="nv"> </span><span class="s">domain</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">searchable</span><span class="nv"> </span><span class="s">domains</span>
            <span class="s">echo</span><span class="nv"> </span><span class="s">search</span><span class="nv"> </span><span class="s">swift.internal</span><span class="nv"> </span><span class="s">&gt;&gt;</span><span class="nv"> </span><span class="s">/etc/resolv.conf</span>
            
            <span class="s">#</span><span class="nv"> </span><span class="s">Amazon</span><span class="nv"> </span><span class="s">Linux</span><span class="nv"> </span><span class="s">specific</span><span class="nv"> </span><span class="s">hack</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">preserve</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">domain</span><span class="nv"> </span><span class="s">search</span><span class="nv"> </span><span class="s">config</span><span class="nv"> </span><span class="s">between</span><span class="nv"> </span><span class="s">reboots</span>
            <span class="s">echo</span><span class="nv"> </span><span class="s">'prepend domain-search "swift.internal";' &gt;&gt; /etc/dhcp/dhclient.conf</span>

            <span class="s">## Hostname</span>
            <span class="s"># Change hostname to the DNS NAME, which in turn is the name tag of the instance</span> 
            <span class="s">hostnamectl set-hostname $DNS_NAME.swift.internal</span>
            
            <span class="s"># Amazon EC2 specific hack to preserve hostname between reboots</span>
            <span class="s">echo 'preserve_hostname</span><span class="err">:</span> <span class="no">true</span><span class="s">' &gt;&gt; /etc/cloud/cloud.cfg</span>


            <span class="s">## Attach the EBS volumes</span>
            <span class="s"># see</span><span class="err">:</span> <span class="s">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html</span>
            <span class="s"># home</span>
            <span class="s">aws ec2 attach-volume --region $EC2_REGION --instance-id $EC2_INSTANCE_ID --volume-id ${HomeVolumeId} --device /dev/sdh</span>
            <span class="s">while [ ! -e /dev/sdh ]; do</span> 
              <span class="s">echo Waiting for Home EBS volume to attach</span>
              <span class="s">sleep </span><span class="m">30</span>
            <span class="s">done</span>

            <span class="s"># docker</span>
            <span class="s"># Docker volume is not shared. Each instance has its own Docker volume</span> 


            <span class="s">## Format EBS volumes</span>
            <span class="s"># Check if formatted and if not, format using ext4</span>
            <span class="s"># home</span>
            <span class="s">device_fs_type=`file -sL /dev/sdh`</span>
            <span class="s">if [[ $device_fs_type != *"ext4"* ]]; then</span>
                <span class="s">mkfs --type ext4 /dev/sdh</span>
            <span class="s">fi</span>

            <span class="s"># docker</span>
            <span class="s">device_fs_type=`file -sL /dev/sdi`</span>
            <span class="s">if [[ $device_fs_type != *"ext4"* ]]; then</span>
                <span class="s">mkfs --type ext4 /dev/sdi</span>
            <span class="s">fi</span>


            <span class="s">## Mount EBS file systems</span>
            <span class="s"># home</span>
            <span class="s">mkdir -p /ebs/home</span>
            <span class="s">echo '/dev/sdh /ebs/home ext4 defaults,nofail 0 2' | tee -a /etc/fstab</span>
            
            <span class="s"># docker</span>
            <span class="s">mkdir -p /ebs/docker</span>
            <span class="s">echo '/dev/sdi /ebs/docker ext4 defaults,nofail 0 2' | tee -a /etc/fstab</span>
            
            <span class="s">mount --all</span>


            <span class="s">## Users</span>
            <span class="s"># add users</span>
            <span class="s"># runner</span>
            <span class="s">groupadd --gid 200000 runner</span> 
            <span class="s">useradd --gid runner --uid 200000  runner</span>

            <span class="s"># worker</span>
            <span class="s">useradd --create-home --home-dir /ebs/home/worker worker</span>


            <span class="s">## Install Software</span>
            <span class="s">yum update -y</span>
            <span class="s">yum install docker git jq htop -y</span>


            <span class="s">## Docker config</span>
            <span class="s">#see</span><span class="err">:</span> <span class="s">https://docs.docker.com/engine/security/userns-remap/</span>

            <span class="s"># - Use `/ebs/docker` as data-root (for containers and volumes)</span>
            <span class="s"># - Map container `root` user to host `runner` user</span>             
            <span class="s">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span>
            <span class="s">{</span>
              <span class="s">"data-root"</span><span class="err">:</span> <span class="s2">"</span><span class="s">/ebs/docker"</span><span class="err">,</span>
              <span class="s2">"</span><span class="s">userns-remap"</span><span class="err">:</span> <span class="s2">"</span><span class="s">runner"</span>
            <span class="err">}</span>            
            <span class="s">EOF</span>

            <span class="s"># additional config needed for the Docker user namespace mapping</span>
            <span class="s">touch /etc/subuid /etc/subgid</span>
            <span class="s">echo "runner:$(id -u runner):65536" | sudo tee -a /etc/subuid</span>
            <span class="s">echo "runner:$(id -g runner):65536" | sudo tee -a /etc/subgid</span>

            <span class="s"># Enable Docker to run at boot and start it</span>
            <span class="s">systemctl enable docker</span>
            <span class="s">systemctl start docker</span>

            <span class="s"># add users to the docker group</span>
            <span class="s">usermod --append --groups docker ec2-user</span>
            <span class="s">usermod --append --groups docker worker</span>


            <span class="s">## SSH</span>

            <span class="s"># enable ssh login for the worker account</span>
            <span class="s">user_home=/ebs/home/worker</span>
            <span class="s">if [ ! -f "$user_home/.ssh/id_rsa" ]; then</span>
              <span class="s">sudo -iu worker sh -c "ssh-keygen -t rsa -f $user_home/.ssh/id_rsa -q -P ''"</span> 
              <span class="s">sudo -iu worker sh -c "cat $user_home/.ssh/id_rsa.pub &gt; $user_home/.ssh/authorized_keys"</span>
              <span class="s">sudo -iu worker sh -c "chmod 700 $user_home/.ssh"</span>
              <span class="s">sudo -iu worker sh -c "chmod 600 $user_home/.ssh/authorized_keys"</span>
            <span class="s">fi</span>

            <span class="s"># download and install docker compose (optional)</span>
            <span class="s"># platform=$(uname -s)-$(uname -m)</span>
            <span class="s"># wget https://github.com/docker/compose/releases/latest/download/docker-compose-$platform</span> 
            <span class="s"># mv docker-compose-$platform /usr/local/bin/docker-compose</span>
            <span class="s"># chmod -v +x /usr/local/bin/docker-compose</span>


            <span class="s">## Install AWS CLI v2</span>
            <span class="s">curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"</span>
            <span class="s">unzip awscliv2.zip</span>
            <span class="s">./aws/install</span>


            <span class="s"># signal that we are done</span>
            <span class="s">/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance</span> 
    <span class="na">CreationPolicy</span><span class="pi">:</span>
      <span class="na">ResourceSignal</span><span class="pi">:</span>
        <span class="na">Timeout</span><span class="pi">:</span> <span class="s">PT15M</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">InstanceId</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">ID of the launched instance</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">Instance</span>
</code></pre></div></div>

<h2 id="scripts">Scripts</h2>

<p>Add a script <code class="language-plaintext highlighter-rouge">deploy-ec2-manager.sh</code> and paste this code in it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Deploying </span><span class="nv">$stack_ec2_manager</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

</span><span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_pub_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
<span class="nv">security_group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2  describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group_pub_1</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>

<span class="nv">instance_profile</span><span class="o">=</span><span class="si">$(</span>aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_iam_manager</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "InstanceProfile") | .OutputValue'</span><span class="si">)</span>

<span class="nv">hosted_zone_id</span><span class="o">=</span><span class="si">$(</span>aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "HostedZoneId") | .OutputValue'</span><span class="si">)</span>

<span class="c"># home volume is shared between manager and worker(s)</span>
<span class="nv">home_volume_id</span><span class="o">=</span><span class="si">$(</span>aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_ebs</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "HomeVolumeId") | .OutputValue'</span><span class="si">)</span>

<span class="nb">set</span> <span class="nt">-x</span>

aws cloudformation deploy <span class="se">\</span>
    <span class="nt">--template-file</span> ec2-manager/ec2-manager.yml <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_manager</span> <span class="se">\</span>
    <span class="nt">--parameter-overrides</span> <span class="se">\</span>
        <span class="nv">KeyPair</span><span class="o">=</span><span class="nv">$ec2_key_pair</span> <span class="se">\</span>
        <span class="nv">SubnetId</span><span class="o">=</span><span class="nv">$subnet_id</span> <span class="se">\</span>
        <span class="nv">SecurityGroupId</span><span class="o">=</span><span class="nv">$security_group_id</span> <span class="se">\</span>
        <span class="nv">InstanceProfile</span><span class="o">=</span><span class="nv">$instance_profile</span> <span class="se">\</span>
        <span class="nv">HostedZoneId</span><span class="o">=</span><span class="nv">$hosted_zone_id</span> <span class="se">\</span>
        <span class="nv">HomeVolumeId</span><span class="o">=</span><span class="nv">$home_volume_id</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Let’s also add a clean up script <code class="language-plaintext highlighter-rouge">rm-ec2-manager.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Destroying </span><span class="nv">$stack_ec2_manager</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation delete-stack <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_manager</span> 

aws cloudformation <span class="nb">wait </span>stack-delete-complete <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_manager</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Make the scripts executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ec2-manager/deploy-ec2-manager.sh 
<span class="nb">chmod</span> +x ec2-manager/rm-ec2-manager.sh
</code></pre></div></div>

<h3 id="deploy">Deploy</h3>

<p>Finally let’s run the “deploy” script to create the Manager instance:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ec2-manager/deploy-ec2-manager.sh
</code></pre></div></div>

<p>You should see output similar to this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deploying swift-swarm-ec2-manager stack via cloud-formation:
https://us-west-2.console.aws.amazon.com/cloudformation/home

+ aws cloudformation deploy <span class="nt">--template-file</span> ec2-manager/ec2-manager.yml <span class="nt">--stack-name</span> swift-swarm-ec2-manager <span class="nt">--parameter-overrides</span> <span class="nv">KeyPair</span><span class="o">=</span>aws-ec2-key <span class="nv">SubnetId</span><span class="o">=</span>subnet-008f06da59b0f682a <span class="nv">SecurityGroupId</span><span class="o">=</span>sg-0668991ca731a2201 <span class="nv">InstanceProfile</span><span class="o">=</span>swift-swarm-iam-manager-InstanceProfile-qeqXudscgUtM <span class="nv">HostedZoneId</span><span class="o">=</span>Z07362313E0WMP6Y4DBYT <span class="nv">HomeVolumeId</span><span class="o">=</span>vol-08b4fb87713440e48

Waiting <span class="k">for </span>changeset to be created..
Waiting <span class="k">for </span>stack create/update to <span class="nb">complete
</span>Successfully created/updated stack - swift-swarm-ec2-manager
</code></pre></div></div>

<h3 id="login">Login</h3>

<p>Create a directory <code class="language-plaintext highlighter-rouge">ssh</code> and in it a script named <code class="language-plaintext highlighter-rouge">ssh-manager.sh</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ssh
<span class="nb">touch </span>ssh/ssh-manager.sh
<span class="nb">chmod</span> +x ssh/ssh-manager.sh
nano ssh/ssh-manager.sh
</code></pre></div></div>

<p>Copy and paste this code in the <code class="language-plaintext highlighter-rouge">ssh-manager.sh</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">popd

</span><span class="nv">ec2_key</span><span class="o">=</span><span class="s2">"~/.ssh/aws-ec2-key"</span>
<span class="nv">ec2_instance</span><span class="o">=</span><span class="si">$(</span> aws cloudformation describe-stacks <span class="nt">--stack-name</span> <span class="nv">$stack_ec2_manager</span> | jq <span class="nt">-r</span> <span class="s1">'.Stacks[0].Outputs[] | select(.OutputKey == "InstanceId") | .OutputValue'</span> <span class="si">)</span>
<span class="nv">ec2_ip</span><span class="o">=</span><span class="si">$(</span> aws ec2 describe-instances <span class="nt">--instance-ids</span> <span class="nv">$ec2_instance</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].PublicIpAddress'</span> <span class="si">)</span>

ssh <span class="nt">-i</span> <span class="nv">$ec2_key</span> ec2-user@<span class="nv">$ec2_ip</span>
</code></pre></div></div>

<p>You should be able to connect to the Manager machine via ssh now:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ssh/ssh-manager.sh
</code></pre></div></div>

<p>At this point your project structure should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── config
│   └── names.sh
├── ebs
│   ├── deploy-ebs.sh
│   ├── ebs.yml
│   └── rm-ebs.sh
├── ec2-manager
│   ├── deploy-ec2-manager.sh
│   ├── ec2-manager.yml
│   └── rm-ec2-manager.sh
├── iam
│   ├── deploy-iam-manager.sh
│   ├── deploy-iam-worker.sh
│   ├── iam-manager.yml
│   ├── iam-worker.yml
│   ├── rm-iam-manager.sh
│   └── rm-iam-worker.sh
├── ssh
│   └── ssh-manager.sh
└── vpc
    ├── deploy-vpc.sh
    ├── rm-vpc.sh
    └── vpc.yml
</code></pre></div></div>

<p>Congratulations!</p>

<p>We are done with <code class="language-plaintext highlighter-rouge">Step 4. Manager Instance</code>.</p>

<p>Next step is: <a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Step 5. Worker Launch Template</a></p>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><category term="ec2" /><category term="cloud-formation" /><category term="docker" /><category term="docker-swarm" /><summary type="html"><![CDATA[In this step we will configure and launch the Manager EC2 instance. This post is part of a thread that includes these steps: Network Setup Storage Roles Manager Instance (this post) Worker Launch Template Worker Instances Docker Swarm Cleanup]]></summary></entry><entry><title type="html">Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 3 - Roles</title><link href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles/" rel="alternate" type="text/html" title="Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 3 - Roles" /><published>2021-08-11T00:00:00-07:00</published><updated>2021-08-11T00:00:00-07:00</updated><id>/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles</id><content type="html" xml:base="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles/"><![CDATA[<p>In this step we create the IAM roles and policies needed by the EC2 instances.</p>

<p>This post is part of a thread that includes these steps:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage">Storage</a></li>
  <li>Roles (this post)</li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Manager Instance</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Worker Launch Template</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup">Cleanup</a></li>
</ol>

<h2 id="identity-and-access-management-aws-iam">Identity and Access Management (AWS IAM)</h2>

<p>Start in the project directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/swift-aws-ec2-swarm
</code></pre></div></div>

<h3 id="cloud-formation-template">cloud-formation Template</h3>

<p>We need to create IAM Role and Instance Profile for two types of instances:</p>

<ol>
  <li>Manager - this will be used by the Manager instance</li>
  <li>Worker - this will be used by the Worker instances</li>
</ol>

<h4 id="manager">Manager</h4>

<p>Create a folder <code class="language-plaintext highlighter-rouge">iam</code> and a <code class="language-plaintext highlighter-rouge">iam-manager.yml</code> file in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> iam
<span class="nb">touch </span>iam/iam-manager.yml
nano iam/iam-manager.yml
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">iam-manager.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Description</span><span class="pi">:</span>  <span class="s">IAM role and instance profile for the Manager instance</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">Prefix</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">An environment name that is prefixed to resource names</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>

<span class="c1"># Permissions for the Manager instance</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">Role</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="c1"># tags:</span>
        <span class="pi">-</span> <span class="na">Key</span><span class="pi">:</span> <span class="s">Name</span>
          <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">${Prefix}-iam-role-manager</span>
      <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
        <span class="na">Version</span><span class="pi">:</span> <span class="s">2012-10-17</span>
        <span class="na">Statement</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>
            <span class="na">Principal</span><span class="pi">:</span>
              <span class="na">Service</span><span class="pi">:</span> <span class="s">ec2.amazonaws.com</span>
            <span class="na">Action</span><span class="pi">:</span> <span class="s">sts:AssumeRole</span>
      <span class="na">ManagedPolicyArns</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly</span>
      <span class="na">Policies</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">PolicyName</span><span class="pi">:</span> <span class="s">root</span>
          <span class="na">PolicyDocument</span><span class="pi">:</span>
            <span class="na">Version</span><span class="pi">:</span> <span class="s">2012-10-17</span>
            <span class="na">Statement</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>
                <span class="na">Action</span><span class="pi">:</span> 
                  <span class="pi">-</span> <span class="s">ec2:DescribeTags</span>
                  <span class="pi">-</span> <span class="s">ec2:AttachVolume</span>
                  <span class="pi">-</span> <span class="s">ec2:DetachVolume</span>
                  <span class="pi">-</span> <span class="s">ecr:DescribeRegistry</span>
                  <span class="pi">-</span> <span class="s">route53:*</span>
                <span class="na">Resource</span><span class="pi">:</span> <span class="s1">'</span><span class="s">*'</span>

  <span class="na">InstanceProfile</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::IAM::InstanceProfile</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">Roles</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="kt">!Ref</span> <span class="s">Role</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">InstanceProfile</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">A reference to the created InstanceProfile</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">InstanceProfile</span>
</code></pre></div></div>

<h4 id="worker">Worker</h4>

<p>Create a file <code class="language-plaintext highlighter-rouge">iam/iam-worker.yml</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>iam/iam-worker.yml
nano iam/iam-worker.yml
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">iam-worker.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Description</span><span class="pi">:</span>  <span class="s">IAM role and instance profile for the Worker instances</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">Prefix</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">An environment name that is prefixed to resource names</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>

<span class="c1"># Permissions for the Worker instance(s)</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">Role</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::IAM::Role</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="c1"># tags:</span>
        <span class="pi">-</span> <span class="na">Key</span><span class="pi">:</span> <span class="s">Name</span>
          <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Sub</span> <span class="s">${Prefix}-iam-role-worker</span>
      <span class="na">AssumeRolePolicyDocument</span><span class="pi">:</span>
        <span class="na">Version</span><span class="pi">:</span> <span class="s">2012-10-17</span>
        <span class="na">Statement</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>
            <span class="na">Principal</span><span class="pi">:</span>
              <span class="na">Service</span><span class="pi">:</span> <span class="s">ec2.amazonaws.com</span>
            <span class="na">Action</span><span class="pi">:</span> <span class="s">sts:AssumeRole</span>
      <span class="na">ManagedPolicyArns</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly</span>
      <span class="na">Policies</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">PolicyName</span><span class="pi">:</span> <span class="s">root</span>
          <span class="na">PolicyDocument</span><span class="pi">:</span>
            <span class="na">Version</span><span class="pi">:</span> <span class="s">2012-10-17</span>
            <span class="na">Statement</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s">Allow</span>
                <span class="na">Action</span><span class="pi">:</span> 
                  <span class="pi">-</span> <span class="s">ec2:DescribeTags</span>
                  <span class="pi">-</span> <span class="s">ec2:AttachVolume</span>
                  <span class="pi">-</span> <span class="s">ec2:DetachVolume</span>
                  <span class="pi">-</span> <span class="s">ecr:DescribeRegistry</span>
                  <span class="pi">-</span> <span class="s">route53:*</span>
                <span class="na">Resource</span><span class="pi">:</span> <span class="s1">'</span><span class="s">*'</span>

  <span class="na">InstanceProfile</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::IAM::InstanceProfile</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">Roles</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="kt">!Ref</span> <span class="s">Role</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">InstanceProfile</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">A reference to the created InstanceProfile</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">InstanceProfile</span>
</code></pre></div></div>

<h2 id="scripts">Scripts</h2>

<h3 id="manager-1">Manager</h3>

<p>Add a script <code class="language-plaintext highlighter-rouge">iam/deploy-iam-manager.sh</code> and paste this code in it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Deploying </span><span class="nv">$stack_iam_manager</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

<span class="c"># NOTE: `--capabilities CAPABILITY_IAM` is needed because the `iam.yml` cloud-formation template creates roles and instance profiles.</span>

aws cloudformation deploy <span class="se">\</span>
    <span class="nt">--capabilities</span> CAPABILITY_IAM <span class="se">\</span>
    <span class="nt">--template-file</span> iam/iam-manager.yml <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_manager</span> <span class="se">\</span>
    <span class="nt">--parameter-overrides</span> <span class="nv">Prefix</span><span class="o">=</span><span class="nv">$prefix</span>

<span class="nb">popd</span>
</code></pre></div></div>
<h3 id="worker-1">Worker</h3>

<p>Add a script <code class="language-plaintext highlighter-rouge">iam/deploy-iam-worker.sh</code> and paste this code in it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Deploying </span><span class="nv">$stack_iam_worker</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

<span class="c"># NOTE: `--capabilities CAPABILITY_IAM` is needed because the `iam.yml` cloud-formation template creates roles and instance profiles.</span>

aws cloudformation deploy <span class="se">\</span>
    <span class="nt">--capabilities</span> CAPABILITY_IAM <span class="se">\</span>
    <span class="nt">--template-file</span> iam/iam-worker.yml <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_worker</span> <span class="se">\</span>
    <span class="nt">--parameter-overrides</span> <span class="nv">Prefix</span><span class="o">=</span><span class="nv">$prefix</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Let’s also add clean up scripts. First the <code class="language-plaintext highlighter-rouge">rm-iam-manager.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Removing </span><span class="nv">$stack_iam_manager</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation delete-stack <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_manager</span> 

aws cloudformation <span class="nb">wait </span>stack-delete-complete <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_manager</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>and another one for the worker - <code class="language-plaintext highlighter-rouge">rm-iam-worker.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Removing </span><span class="nv">$stack_iam_worker</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation delete-stack <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_worker</span> 

aws cloudformation <span class="nb">wait </span>stack-delete-complete <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_iam_worker</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Make all scripts executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x iam/deploy-iam-manager.sh 
<span class="nb">chmod</span> +x iam/rm-iam-manager.sh

<span class="nb">chmod</span> +x iam/deploy-iam-worker.sh 
<span class="nb">chmod</span> +x iam/rm-iam-worker.sh
</code></pre></div></div>

<h3 id="deploy">Deploy</h3>

<p>Finally let’s run the “deploy” scripts to create the IAM roles. First for the Manager:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./iam/deploy-iam-manager.sh
</code></pre></div></div>

<p>You should see output similar to this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deploying swift-swarm-iam-manager stack via cloud-formation:
https://us-west-2.console.aws.amazon.com/cloudformation/home

+ aws cloudformation deploy <span class="nt">--capabilities</span> CAPABILITY_IAM <span class="nt">--template-file</span> iam/iam-manager.yml <span class="nt">--stack-name</span> swift-swarm-iam-manager <span class="nt">--parameter-overrides</span> <span class="nv">Prefix</span><span class="o">=</span>swift-swarm

Waiting <span class="k">for </span>changeset to be created..
Waiting <span class="k">for </span>stack create/update to <span class="nb">complete
</span>Successfully created/updated stack - swift-swarm-iam-manager
</code></pre></div></div>

<p>then for the Worker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./iam/deploy-iam-worker.sh
</code></pre></div></div>

<p>You should see output similar to this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deploying swift-swarm-iam-worker stack via cloud-formation:
https://us-west-2.console.aws.amazon.com/cloudformation/home

+ aws cloudformation deploy <span class="nt">--capabilities</span> CAPABILITY_IAM <span class="nt">--template-file</span> iam/iam-worker.yml <span class="nt">--stack-name</span> swift-swarm-iam-worker <span class="nt">--parameter-overrides</span> <span class="nv">Prefix</span><span class="o">=</span>swift-swarm

Waiting <span class="k">for </span>changeset to be created..
Waiting <span class="k">for </span>stack create/update to <span class="nb">complete
</span>Successfully created/updated stack - swift-swarm-iam-worker
</code></pre></div></div>

<p>At this point your project structure should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── config
│   └── names.sh
├── ebs
│   ├── deploy-ebs.sh
│   ├── ebs.yml
│   └── rm-ebs.sh
├── iam
│   ├── deploy-iam-manager.sh
│   ├── deploy-iam-worker.sh
│   ├── iam-manager.yml
│   ├── iam-worker.yml
│   ├── rm-iam-manager.sh
│   └── rm-iam-worker.sh
└── vpc
    ├── deploy-vpc.sh
    ├── rm-vpc.sh
    └── vpc.yml
</code></pre></div></div>

<p>Congratulations!</p>

<p>We are done with <code class="language-plaintext highlighter-rouge">Step 3. Roles</code>.</p>

<p>Next step is: <a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Step 4. Manager Instance</a></p>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><category term="ec2" /><category term="cloud-formation" /><category term="docker" /><category term="docker-swarm" /><summary type="html"><![CDATA[In this step we create the IAM roles and policies needed by the EC2 instances. This post is part of a thread that includes these steps: Network Setup Storage Roles (this post) Manager Instance Worker Launch Template Worker Instances Docker Swarm Cleanup]]></summary></entry><entry><title type="html">Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 2 - Storage</title><link href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage/" rel="alternate" type="text/html" title="Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 2 - Storage" /><published>2021-08-11T00:00:00-07:00</published><updated>2021-08-11T00:00:00-07:00</updated><id>/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage</id><content type="html" xml:base="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage/"><![CDATA[<p>In this step we will create a shared EBS volume which will be used as a home directory for the Linux users.</p>

<p>This post is part of a thread that includes these steps:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li>Storage (this post)</li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Roles</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Manager Instance</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Worker Launch Template</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup">Cleanup</a></li>
</ol>

<h1 id="elastic-block-storage-aws-ebs">Elastic Block Storage (AWS EBS)</h1>

<p>Start in the project directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/swift-aws-ec2-swarm
</code></pre></div></div>

<h3 id="cloud-formation-template">cloud-formation Template</h3>

<p>Create a folder <code class="language-plaintext highlighter-rouge">ebs</code> and a <code class="language-plaintext highlighter-rouge">ebs.yml</code> file in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ebs
<span class="nb">touch </span>ebs/ebs.yml
nano ebs/ebs.yml
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">ebs.yml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">Description</span><span class="pi">:</span> <span class="s">Shared EBS volumes for the Docker Swarm instances</span>  

<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">HomeVolume</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s1">'</span><span class="s">AWS::EC2::Volume'</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">VolumeType</span><span class="pi">:</span> <span class="s">io2</span>
      <span class="na">Iops</span><span class="pi">:</span> <span class="s">3000</span>      
      <span class="na">Size</span><span class="pi">:</span> <span class="m">30</span>
      <span class="na">Encrypted</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">AvailabilityZone</span><span class="pi">:</span> <span class="kt">!Select</span> <span class="pi">[</span> <span class="nv">0</span><span class="pi">,</span> <span class="kt">!GetAZs</span> <span class="s1">'</span><span class="s">'</span> <span class="pi">]</span>
      <span class="na">MultiAttachEnabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="c1"># tags:</span>
        <span class="pi">-</span> <span class="na">Key</span><span class="pi">:</span> <span class="s">Name</span>
          <span class="na">Value</span><span class="pi">:</span> <span class="s">shared-volume-home</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">HomeVolumeId</span><span class="pi">:</span>
    <span class="na">Description</span><span class="pi">:</span> <span class="s">The ID of the created home EBS volume</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">HomeVolume</span>
</code></pre></div></div>

<h2 id="scripts">Scripts</h2>

<p>Next add a script <code class="language-plaintext highlighter-rouge">deploy-ebs.sh</code> and paste this code in it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Deploying </span><span class="nv">$stack_ebs</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation deploy <span class="se">\</span>
    <span class="nt">--template-file</span> ebs/ebs.yml <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ebs</span>

<span class="nb">popd</span>
</code></pre></div></div>

<p>Let’s also add a clean up script <code class="language-plaintext highlighter-rouge">rm-ebs.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>


<span class="c"># switch to parent directory</span>
<span class="nv">script_path</span><span class="o">=</span><span class="sb">`</span><span class="nb">dirname</span> <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="p">[0]</span><span class="k">}</span><span class="sb">`</span>
<span class="nb">pushd</span> <span class="nv">$script_path</span>/..

<span class="nb">source </span>config/names.sh

<span class="nb">echo
echo</span> <span class="s2">"Destroying </span><span class="nv">$stack_ebs</span><span class="s2"> stack via cloud-formation:"</span>
<span class="nb">echo</span> <span class="s1">'https://us-west-2.console.aws.amazon.com/cloudformation/home'</span>
<span class="nb">echo

set</span> <span class="nt">-x</span>

aws cloudformation delete-stack <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ebs</span> 

aws cloudformation <span class="nb">wait </span>stack-delete-complete <span class="se">\</span>
    <span class="nt">--stack-name</span> <span class="nv">$stack_ebs</span>
</code></pre></div></div>

<p>Make the scripts executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ebs/deploy-ebs.sh 
<span class="nb">chmod</span> +x ebs/rm-ebs.sh
</code></pre></div></div>

<h3 id="deploy">Deploy</h3>

<p>Finally let’s run the “deploy” script to create the EBS volumes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ebs/deploy-ebs.sh
</code></pre></div></div>

<p>You should see output similar to this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Deploying swift-swarm-ebs stack via cloud-formation:
https://us-west-2.console.aws.amazon.com/cloudformation/home

+ aws cloudformation deploy <span class="nt">--template-file</span> ebs/ebs.yml <span class="nt">--stack-name</span> swift-swarm-ebs

Waiting <span class="k">for </span>changeset to be created..
Waiting <span class="k">for </span>stack create/update to <span class="nb">complete
</span>Successfully created/updated stack - swift-swarm-ebs
</code></pre></div></div>

<p>At this point your project structure should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
├── config
│   └── names.sh
├── ebs
│   ├── deploy-ebs.sh
│   ├── ebs.yml
│   └── rm-ebs.sh
└── vpc
    ├── deploy-vpc.sh
    ├── rm-vpc.sh
    └── vpc.yml
</code></pre></div></div>

<p>Congratulations!</p>

<p>We are done with <code class="language-plaintext highlighter-rouge">Step 2. Storage</code>.</p>

<p>Next step is: <a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Step 3. Roles</a></p>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><category term="ec2" /><category term="cloud-formation" /><category term="docker" /><category term="docker-swarm" /><summary type="html"><![CDATA[In this step we will create a shared EBS volume which will be used as a home directory for the Linux users. This post is part of a thread that includes these steps: Network Setup Storage (this post) Roles Manager Instance Worker Launch Template Worker Instances Docker Swarm Cleanup]]></summary></entry><entry><title type="html">Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 8 - Cleanup</title><link href="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup/" rel="alternate" type="text/html" title="Deploy Docker Swarm on AWS EC2 via cloud-formation templates - Step 8 - Cleanup" /><published>2021-08-11T00:00:00-07:00</published><updated>2021-08-11T00:00:00-07:00</updated><id>/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup</id><content type="html" xml:base="/deploy-docker-swarm-aws-ec2-cloudformation-step-8-cleanup/"><![CDATA[<p>In this step we cleanup the resources that we creater for the Docker Swarm cluster on EC2.</p>

<p>This post is part of a thread that includes these steps:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage">Storage</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Roles</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Manager Instance</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Worker Launch Template</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li>Cleanup (this post)</li>
</ol>

<h1 id="cleanup">Cleanup</h1>

<h2 id="docker-swarm">Docker Swarm</h2>

<h3 id="login-to-manager-machine">Login to manager machine</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ssh/ssh-manager.sh
</code></pre></div></div>

<p>Switch user to the <code class="language-plaintext highlighter-rouge">worker</code> user:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>su - worker
</code></pre></div></div>

<h3 id="remove-all-nodes-from-swarm">Remove all nodes from Swarm</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pssh <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="s1">'docker swarm leave'</span>
</code></pre></div></div>

<h3 id="destroy-swarm">Destroy Swarm</h3>

<p>On manager machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker swarm leave <span class="nt">--force</span> 
</code></pre></div></div>

<h3 id="clean-up-dangling-networks">Clean up dangling networks</h3>

<p>After destroying the Swarm make sure that you do not have dangling networks <code class="language-plaintext highlighter-rouge">ingress</code> and <code class="language-plaintext highlighter-rouge">docker_gwbridge</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network <span class="nb">ls</span>
</code></pre></div></div>

<p>If you see <code class="language-plaintext highlighter-rouge">ingress</code> or <code class="language-plaintext highlighter-rouge">docker_gwbridge</code>, force remove them:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network disconnect <span class="nt">--force</span> docker_gwbridge
docker network <span class="nb">rm </span>docker_gwbridge
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network disconnect <span class="nt">--force</span> ingress
docker network <span class="nb">rm </span>ingress
</code></pre></div></div>

<p>Also you have to do the same for all nodes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pssh <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="s1">'docker network rm docker_gwbridge'</span>
pssh <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="s1">'docker network rm ingress'</span>
</code></pre></div></div>

<p>Remove <code class="language-plaintext highlighter-rouge">swift_default</code> network:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker network <span class="nb">rm </span>swift_default
</code></pre></div></div>

<h3 id="docker-cleanup">Docker Cleanup</h3>

<p>These commands will remove all stopped containers and all images that do not have a running container on <strong>all nodes</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># stop and femove containers</span>
pssh <span class="nt">--timeout</span> 300 <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="se">\</span>
  <span class="s1">'docker container prune --force'</span>

<span class="c"># delete unused images</span>
pssh <span class="nt">--timeout</span> 300 <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="se">\</span>
  <span class="s1">'docker image prune --all --force'</span>
  
<span class="c"># check root file system</span>
pssh <span class="nt">--timeout</span> 300 <span class="nt">--hosts</span><span class="o">=</span><span class="nv">$HOME</span>/nodes/hosts <span class="nt">--inline</span> <span class="se">\</span>
  <span class="s1">'df --human-readable /ebs/docker'</span>  
</code></pre></div></div>

<h2 id="route-53-cleanup-script">Route 53 Cleanup Script</h2>

<p>Start in the project directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/swift-aws-ec2-swarm
</code></pre></div></div>

<p>Create a folder <code class="language-plaintext highlighter-rouge">route53</code> and a <code class="language-plaintext highlighter-rouge">route53-delete-record.sh</code> file in it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> route53
<span class="nb">touch </span>route53/route53-delete-record.sh
nano route53/route53-delete-record.sh
</code></pre></div></div>

<p>Copy and paste this code into <code class="language-plaintext highlighter-rouge">route53-delete-record.sh</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c"># =============================================================================================================</span>
<span class="c"># Usage:</span>
<span class="c">#   ./route53-delete-record.sh [HostedZoneName] [Hostname] [Type]</span>
<span class="c">#</span>
<span class="c"># Example:</span>
<span class="c">#   ./route53-delete-record.sh example.org dummy.example.org</span>
<span class="c">#   ./route53-delete-record.sh example.org dummy.example.org TXT</span>
<span class="c">#   ./route53-delete-record.sh example.org dummy.example.org txt</span>
<span class="c">#   ./route53-delete-record.sh example.org dummy.example.org CNAME</span>
<span class="c"># =============================================================================================================</span>

<span class="c"># output coloring</span>
<span class="nv">RED</span><span class="o">=</span><span class="si">$(</span>tput setaf 1<span class="si">)</span>
<span class="nv">GREEN</span><span class="o">=</span><span class="si">$(</span>tput setaf 2<span class="si">)</span>
<span class="nv">YELLOW</span><span class="o">=</span><span class="si">$(</span>tput setaf 3<span class="si">)</span>
<span class="nv">CLEAR</span><span class="o">=</span><span class="si">$(</span>tput sgr0<span class="si">)</span>

<span class="c"># put your value here</span>
<span class="c"># note that jq can work with env var</span>
<span class="nv">HOSTED_ZONE</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">example</span><span class="p">.org</span><span class="k">}</span>
<span class="nv">DNS_NAME</span><span class="o">=</span><span class="k">${</span><span class="nv">2</span><span class="k">:-</span><span class="nv">test</span><span class="p">.example.org</span><span class="k">}</span>
<span class="nv">DNS_TYPE</span><span class="o">=</span><span class="k">${</span><span class="nv">3</span><span class="k">:-</span><span class="nv">A</span><span class="k">}</span>

<span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$HOSTED_ZONE</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nv">HOSTED_ZONE</span><span class="o">=</span>example.org

<span class="c"># add . to the end</span>
<span class="nv">DNS_NAME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DNS_NAME</span><span class="s2">."</span>

<span class="c"># capitalize</span>
<span class="nv">DNS_TYPE</span><span class="o">=</span><span class="k">${</span><span class="nv">DNS_TYPE</span><span class="p">^^</span><span class="k">}</span>

<span class="nb">echo </span>Deleting record: <span class="se">\'</span><span class="nv">$DNS_TYPE</span><span class="se">\'</span> <span class="se">\'</span><span class="nv">$DNS_NAME</span><span class="se">\'</span> from hosted zone <span class="se">\'</span><span class="nv">$HOSTED_ZONE</span><span class="se">\'</span> ... 

<span class="c"># find Zone ID</span>
<span class="nv">ZONE_ID</span><span class="o">=</span><span class="si">$(</span>aws route53 list-hosted-zones-by-name <span class="nt">--dns-name</span> <span class="nv">$HOSTED_ZONE</span> <span class="nt">--output</span> json <span class="se">\</span>
  | jq .HostedZones[].Id <span class="nt">--raw-output</span> <span class="se">\</span>
  | <span class="nb">awk</span> <span class="nt">-F</span> / <span class="s1">'{print $3}'</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$ZONE_ID</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="nv">$HOSTED_ZONE</span> hosted zone not found!<span class="nv">$CLEAR</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nb">echo </span>Zone ID: <span class="nv">$YELLOW$ZONE_ID$CLEAR</span>
<span class="nb">echo</span>

<span class="c"># find resource record set</span>
<span class="nv">RECORD_SETS</span><span class="o">=</span><span class="si">$(</span>aws route53 list-resource-record-sets <span class="nt">--hosted-zone-id</span><span class="o">=</span><span class="nv">$ZONE_ID</span> <span class="nt">--output</span> json <span class="se">\</span>
  | jq <span class="s1">'.ResourceRecordSets[] | select ((.Name == '</span><span class="se">\"</span><span class="nv">$DNS_NAME</span><span class="se">\"</span><span class="s1">') and (.Type=='</span><span class="se">\"</span><span class="nv">$DNS_TYPE</span><span class="se">\"</span><span class="s1">'))'</span><span class="si">)</span>

<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$RECORD_SETS</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="nv">$DNS_NAME</span> <span class="nv">$DNS_TYPE</span> record not found!<span class="nv">$CLEAR</span>
  <span class="nb">exit </span>1
<span class="k">fi

</span><span class="nb">echo </span>Resource Record Sets:
jq <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$RECORD_SETS</span><span class="s2">"</span>
<span class="nb">echo</span>

<span class="c"># prepare the change batch value</span>
<span class="nv">CHANGE_BATCH</span><span class="o">=</span><span class="si">$(</span><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh">
{
    "Comment": "delete this record",
    "Changes": [
        {
            "Action": "DELETE",
            "ResourceRecordSet":
              </span><span class="nv">$RECORD_SETS</span><span class="sh">

        }
    ]
}
</span><span class="no">EOF
</span><span class="si">)</span>

<span class="nb">echo </span>Change batch:
jq <span class="o">&lt;&lt;&lt;</span> <span class="s2">"</span><span class="nv">$CHANGE_BATCH</span><span class="s2">"</span>
<span class="nb">echo</span>

<span class="c"># perform the deletion</span>
aws route53 change-resource-record-sets <span class="nt">--hosted-zone-id</span><span class="o">=</span><span class="nv">$ZONE_ID</span> <span class="nt">--change-batch</span> <span class="s2">"</span><span class="nv">$CHANGE_BATCH</span><span class="s2">"</span>
</code></pre></div></div>

<p>Make the script executable:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x route53/route53-delete-record.sh
</code></pre></div></div>

<h2 id="delete-aws-resources">Delete AWS resources</h2>

<h3 id="instances">Instances</h3>

<h4 id="worker">Worker</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ec2-worker/rm-ec2-worker.sh
./ec2-worker-lt/rm-ec2-worker-lt.sh
</code></pre></div></div>

<h4 id="manager">Manager</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ec2-manager/rm-ec2-manager.sh
</code></pre></div></div>

<h3 id="iam-roles--instance-profiles">IAM Roles / Instance Profiles</h3>

<h4 id="worker-1">Worker</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./iam/rm-iam-worker.sh
</code></pre></div></div>

<h4 id="manager-1">Manager</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./iam/rm-iam-manager.sh
</code></pre></div></div>

<h3 id="elastic-block-storage-ebs">Elastic Block Storage (EBS)</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./ebs/rm-ebs.sh
</code></pre></div></div>

<h3 id="route-53">Route 53</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./route53/route53-delete-record.sh swift.internal manager.swift.internal

./route53/route53-delete-record.sh swift.internal worker-1.swift.internal
./route53/route53-delete-record.sh swift.internal worker-2.swift.internal
</code></pre></div></div>

<h3 id="vpc">VPC</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./vpc/rm-vpc.sh
</code></pre></div></div>

<p>Congratulations!</p>

<p>We are done with <code class="language-plaintext highlighter-rouge">Step 8. Cleanup</code>. This is the final step of this series.</p>

<p>Here are all the steps again for reference:</p>

<ol>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-1-network-setup">Network Setup</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-2-storage">Storage</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-3-roles">Roles</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-4-manager-instance">Manager Instance</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-5-worker-launch-template">Worker Launch Template</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-6-worker-instances">Worker Instances</a></li>
  <li><a href="/deploy-docker-swarm-aws-ec2-cloudformation-step-7-docker-swarm">Docker Swarm</a></li>
  <li>Cleanup (this post)</li>
</ol>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><category term="ec2" /><category term="cloud-formation" /><category term="docker" /><category term="docker-swarm" /><summary type="html"><![CDATA[In this step we cleanup the resources that we creater for the Docker Swarm cluster on EC2. This post is part of a thread that includes these steps: Network Setup Storage Roles Manager Instance Worker Launch Template Worker Instances Docker Swarm Cleanup (this post)]]></summary></entry></feed>