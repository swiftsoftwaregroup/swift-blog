<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-27T15:33:49-07:00</updated><id>/feed.xml</id><title type="html">Swift Software Group</title><subtitle>&amp;copy; Swift Software Group</subtitle><author><name>Swift Software Group</name></author><entry><title type="html">Configure Ruby Environment on Windows</title><link href="/configure-ruby-environment-windows/" rel="alternate" type="text/html" title="Configure Ruby Environment on Windows" /><published>2023-05-27T00:00:00-07:00</published><updated>2023-05-27T00:00:00-07:00</updated><id>/configure-ruby-environment-windows</id><content type="html" xml:base="/configure-ruby-environment-windows/"><![CDATA[<p>This is a simple guide for configuring a Ruby 2 environment on Windows 11. All scripts are PowerShell.</p>

<h2 id="powershell">PowerShell</h2>

<p>This will allow you to execute PowerShell scripts locally on your machine. In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nt">-ExecutionPolicy</span><span class="w"> </span><span class="nx">RemoteSigned</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">LocalMachine</span><span class="w">
</span></code></pre></div></div>

<h2 id="chocolatey">Chocolatey</h2>

<p>In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">AllSigned</span><span class="w">
</span><span class="n">Set-ExecutionPolicy</span><span class="w"> </span><span class="nx">Bypass</span><span class="w"> </span><span class="nt">-Scope</span><span class="w"> </span><span class="nx">Process</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="n">iex</span><span class="w"> </span><span class="p">((</span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s1">'https://chocolatey.org/install.ps1'</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>Close and reopen PowerShell after that.</p>

<h3 id="set-cache-directory">Set cache directory</h3>

<p>In PowerShell as Administrator:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">set</span><span class="w"> </span><span class="nx">cacheLocation</span><span class="w"> </span><span class="nx">C:/ChocoCache</span><span class="w">
</span></code></pre></div></div>

<h3 id="upgrade">Upgrade</h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">upgrade</span><span class="w"> </span><span class="nx">chocolatey</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby">Ruby</h2>

<p>In PowerShell as <em>Administrator</em>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">ruby</span><span class="w"> </span><span class="nt">-version</span><span class="w"> </span><span class="nx">2.7.2.1</span><span class="w"> </span><span class="nt">-m</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby-devkit-20">Ruby DevKit (2.0+)</h2>

<h3 id="install">Install</h3>

<p>Open PowerShell as Administrator and run the following command:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">ruby2.devkit</span><span class="w">
</span></code></pre></div></div>

<p>This will install Ruby DevKit 2.0+ and its dependencies- in <code class="language-plaintext highlighter-rouge">C:\tools\DevKit2</code>.</p>

<h3 id="configure">Configure</h3>

<p>Open <code class="language-plaintext highlighter-rouge">C:\tools\DevKit2\config.yml</code>and add <code class="language-plaintext highlighter-rouge">C:\tools\ruby27</code> path at the end. The complete <code class="language-plaintext highlighter-rouge">config.yml</code> should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This configuration file contains the absolute path locations of all
# installed Rubies to be enhanced to work with the DevKit. This config
# file is generated by the 'ruby dk.rb init' step and may be modified
# before running the 'ruby dk.rb install' step. To include any installed
# Rubies that were not automagically discovered, simply add a line below
# the triple hyphens with the absolute path to the Ruby root directory.
#
# Example:
#
# ---
# - C:/ruby19trunk
# - C:/ruby192dev
#
---
 - C:/tools/ruby27
</code></pre></div></div>

<p>Run the DevKit installer:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">C:/tools/DevKit2</span><span class="w">
</span><span class="n">ruby</span><span class="w"> </span><span class="nx">dk.rb</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span></code></pre></div></div>

<h2 id="ruby-version-manager">Ruby Version Manager</h2>

<p>Download latest uru.x.y.z.nupkg from <a href="https://bitbucket.org/jonforums/uru/downloads">uru’s downloads</a>. This was <code class="language-plaintext highlighter-rouge">uru.0.8.5.nupkg</code> at the time of writing.</p>

<p>In PowerShell as <em>Administrator</em>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">~/Downloads</span><span class="w">
</span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="s2">"https://bitbucket.org/jonforums/uru/downloads/uru.0.8.5.nupkg"</span><span class="w"> </span><span class="nt">-outfile</span><span class="w"> </span><span class="s2">"uru.0.8.5.nupkg"</span><span class="w">
</span><span class="n">choco</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">uru.0.8.5.nupkg</span><span class="w">
</span></code></pre></div></div>

<h3 id="register-ruby-versions">Register Ruby Versions</h3>

<p>This will work only if you previously have installed Ruby via Chocolatey.</p>

<p>In PowerShell:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uru</span><span class="w"> </span><span class="nx">admin</span><span class="w"> </span><span class="nx">rm</span><span class="w"> </span><span class="nt">--all</span><span class="w">
</span><span class="n">uru</span><span class="w"> </span><span class="nx">admin</span><span class="w"> </span><span class="nx">add</span><span class="w"> </span><span class="nt">--recurse</span><span class="w"> </span><span class="nx">C:\tools</span><span class="w">
</span></code></pre></div></div>

<p>Test:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">uru</span><span class="w"> </span><span class="nx">ls</span><span class="w">
</span></code></pre></div></div>

<h3 id="install-ruby-native-environment">Install Ruby Native Environment</h3>

<p>This is needed for gems that requre antive compilation.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># activate Ruby 2.7</span><span class="w">
</span><span class="n">uru</span><span class="w"> </span><span class="nx">2.7.2</span><span class="w">

</span><span class="c"># use a recent MSYS2 version</span><span class="w">
</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">MSYS2_VERSION</span><span class="o">=</span><span class="s2">"20230526"</span><span class="w">

</span><span class="c"># install</span><span class="w">
</span><span class="n">ridk</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span></code></pre></div></div>

<p>A list of the available MSYS2 versions is available <a href="https://repo.msys2.org/distrib/x86_64/">here</a>.</p>]]></content><author><name>Swift Software Group</name></author><category term="development" /><category term="ruby" /><category term="windows" /><summary type="html"><![CDATA[This is a simple guide for configuring a Ruby 2 environment on Windows 11. All scripts are PowerShell. PowerShell This will allow you to execute PowerShell scripts locally on your machine. In PowerShell as Administrator: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine]]></summary></entry><entry><title type="html">Run MongoDB with Podman</title><link href="/run-mongodb-with-podman/" rel="alternate" type="text/html" title="Run MongoDB with Podman" /><published>2023-05-23T00:00:00-07:00</published><updated>2023-05-23T00:00:00-07:00</updated><id>/run-mongodb-with-podman</id><content type="html" xml:base="/run-mongodb-with-podman/"><![CDATA[<p>Before you start install <a href="/setup-podman-macos">Podman</a>.</p>

<h2 id="set-machine-to-rootful">Set machine to <code class="language-plaintext highlighter-rouge">rootful</code></h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine stop
podman machine <span class="nb">set</span> <span class="nt">--rootful</span>
podman machine start
</code></pre></div></div>

<h2 id="create-a-data-directory">Create a data directory</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> ~/podman/mongo/data/db
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/podman/mongo/data/db
<span class="nb">chmod</span> <span class="nt">-R</span> a+wxr ~/podman
</code></pre></div></div>

<h2 id="setup-mongodb-authentication">Setup MongoDB Authentication</h2>

<p>First run the MongoDb container without authentication:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run <span class="se">\</span>
    <span class="nt">--detach</span> <span class="se">\</span>
    <span class="nt">--tty</span> <span class="se">\</span>
    <span class="nt">--user</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">--user</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">--group</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--name</span> mongo-dev <span class="se">\</span>
    <span class="nt">--publish</span> 27017:27017 <span class="se">\</span>
    <span class="nt">--volume</span> ~/podman/mongo/data/db:/data/db <span class="se">\</span>
    mongo
</code></pre></div></div>

<p>Start a shell in the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman <span class="nb">exec</span> <span class="nt">-it</span> mongo-dev bash
</code></pre></div></div>

<p>In the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mongosh

<span class="c"># in mongo shell now</span>
use admin
db.createUser<span class="o">({</span>user:<span class="s2">"test"</span>, <span class="nb">pwd</span>:<span class="s2">"test"</span>, roles:[<span class="o">{</span>role:<span class="s2">"root"</span>, db:<span class="s2">"admin"</span><span class="o">}]})</span>
<span class="nb">exit

exit</span>
</code></pre></div></div>

<h2 id="restart-mongodb-with-authentication">Restart MongoDB with Authentication</h2>

<p>Stop and remove the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman stop mongo-dev
podman <span class="nb">rm </span>mongo-dev
</code></pre></div></div>

<p>Start the container with authentication:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run <span class="se">\</span>
    <span class="nt">--detach</span> <span class="se">\</span>
    <span class="nt">--tty</span> <span class="se">\</span>
    <span class="nt">--user</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">--user</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">--group</span><span class="si">)</span> <span class="se">\</span>
    <span class="nt">--name</span> mongo-dev <span class="se">\</span>
    <span class="nt">--publish</span> 27017:27017 <span class="se">\</span>
    <span class="nt">--volume</span> ~/podman/mongo/data/db:/data/db <span class="se">\</span>
    mongo <span class="nt">--auth</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="development" /><category term="podman" /><category term="mongodb" /><summary type="html"><![CDATA[Before you start install Podman. Set machine to rootful podman machine stop podman machine set --rootful podman machine start]]></summary></entry><entry><title type="html">Setup Podman on macOS</title><link href="/setup-podman-macos/" rel="alternate" type="text/html" title="Setup Podman on macOS" /><published>2023-05-22T00:00:00-07:00</published><updated>2023-05-22T00:00:00-07:00</updated><id>/setup-podman-macos</id><content type="html" xml:base="/setup-podman-macos/"><![CDATA[<p>Podman is a utility that can be used to create and maintain containers. This post will teach you how to set up Podman on macOS and perform some basic commands.</p>

<h2 id="preparation">Preparation</h2>

<h3 id="homebrew">Homebrew</h3>

<p>Install <a href="https://brew.sh/">Homebrew</a>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="bash-5">bash 5</h3>

<p>Install via Homebrew:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>bash
</code></pre></div></div>

<h2 id="podman">Podman</h2>

<p>Install via Homebrew:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>podman
</code></pre></div></div>

<h2 id="podman-machine">Podman Machine</h2>

<p>Create and start your first Podman machine (2 CPUs, 100GB disk, 4GB memory). Podman machines are backed by <a href="https://www.qemu.org/">QEMU</a>. This will become the default Podman machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine init <span class="nt">--cpus</span> 2 <span class="nt">--disk-size</span> 100 <span class="nt">--memory</span> 4096
</code></pre></div></div>

<p>List all machines:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine <span class="nb">ls</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME                     VM TYPE     CREATED             LAST UP             CPUS        MEMORY      DISK SIZE
podman-machine-default*  qemu        About a minute ago  About a minute ago  2           4.295GB     107.4GB
</code></pre></div></div>

<p>Start the default machine:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine start
</code></pre></div></div>

<p>Verify the installation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman info
</code></pre></div></div>

<p>The machine will be configured in rootless mode. If your containers require root permissions (e.g. ports &lt; 1024), or if you run into compatibility issues with non-podman clients, you can switch using the following command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman machine <span class="nb">set</span> <span class="nt">--rootful</span>
</code></pre></div></div>

<h2 id="test">Test</h2>

<p>Run the <code class="language-plaintext highlighter-rouge">Hello World</code> container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman run hello-world
</code></pre></div></div>

<h2 id="podman-desktop">Podman Desktop</h2>

<p>To start a podman machine automatically at login, also install the Podman Desktop:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install</span> <span class="nt">--cask</span> podman-desktop
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="development" /><category term="podman" /><summary type="html"><![CDATA[Podman is a utility that can be used to create and maintain containers. This post will teach you how to set up Podman on macOS and perform some basic commands.]]></summary></entry><entry><title type="html">Launch ECS container using AWS ECS CLI</title><link href="/launch-ecs-container-ecs-cli/" rel="alternate" type="text/html" title="Launch ECS container using AWS ECS CLI" /><published>2021-06-20T00:00:00-07:00</published><updated>2021-06-20T00:00:00-07:00</updated><id>/launch-ecs-container-ecs-cli</id><content type="html" xml:base="/launch-ecs-container-ecs-cli/"><![CDATA[<p>The Amazon ECS Command Line Interface (CLI) is a command line tool for Amazon Elastic Container Service (Amazon ECS) that provides high-level commands to simplify creating, updating, and monitoring clusters and tasks from a local development environment.</p>

<p>Make sure you do this setup first:</p>

<ol>
  <li><a href="/setup-macos-for-aws-cloud-devops">Setup macOS for AWS Cloud DevOps</a></li>
  <li><a href="/aws-authentication">AWS Authentication</a></li>
</ol>

<h2 id="install-aws-ecs-cli">Install AWS ECS CLI</h2>

<p>Install:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/ecs-cli
<span class="nb">pushd</span> ~/ecs-cli

<span class="c"># Download</span>
curl <span class="nt">-Lo</span> ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-darwin-amd64-latest
curl <span class="nt">-Lo</span> ecs-cli.asc https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-darwin-amd64-latest.asc

<span class="c"># Verify signature</span>
gpg <span class="nt">--keyserver</span> hkp://keys.gnupg.net <span class="nt">--recv</span> BCE9D9A42D51784F
gpg <span class="nt">--verify</span> ecs-cli.asc ecs-cli

<span class="c"># Copy to path</span>
<span class="nb">sudo cp </span>ecs-cli /usr/local/bin
<span class="nb">sudo chmod </span>a+x /usr/local/bin/ecs-cli

<span class="nb">popd</span>
</code></pre></div></div>

<p>Test:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecs-cli <span class="nt">--version</span>
</code></pre></div></div>

<h2 id="define-variables">Define Variables</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">image</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">tag</span><span class="o">=</span><span class="s2">"latest"</span>
<span class="nv">service_name</span><span class="o">=</span><span class="s2">"test"</span>
</code></pre></div></div>

<h2 id="ecs-cli-setup">ECS CLI Setup</h2>

<blockquote>
  <p>Configuration information is stored in the <code class="language-plaintext highlighter-rouge">~/.ecs</code> directory on macOS and Linux systems and in <code class="language-plaintext highlighter-rouge">C:\Users\&lt;username&gt;\AppData\local\ecs</code> on Windows systems.</p>
</blockquote>

<p>Create a profile using your access key and secret key:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="si">$(</span>aws configure get aws_access_key_id<span class="si">)</span>
<span class="nb">export </span><span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="si">$(</span>aws configure get aws_secret_access_key<span class="si">)</span>
<span class="nb">export </span><span class="nv">AWS_REGION</span><span class="o">=</span><span class="si">$(</span>aws configure get region<span class="si">)</span>

ecs-cli configure profile <span class="nt">--profile-name</span> swift
</code></pre></div></div>

<h2 id="ecs-cluster-configuration">ECS Cluster Configuration</h2>

<p>Create a cluster configuration:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">AWS_REGION</span><span class="o">=</span><span class="si">$(</span>aws configure get region<span class="si">)</span>

ecs-cli configure <span class="se">\</span>
  <span class="nt">--config-name</span> test-ecs <span class="se">\</span>
  <span class="nt">--region</span> <span class="nv">$AWS_REGION</span> <span class="se">\</span>
  <span class="nt">--cluster</span> test-ecs <span class="se">\</span>
  <span class="nt">--default-launch-type</span> EC2
  
ecs-cli configure default <span class="nt">--config-name</span> test-ecs  
</code></pre></div></div>

<h2 id="launch-ecs-cluster">Launch ECS Cluster</h2>

<p>This will take a few minutes to complete:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecs-cli up <span class="se">\</span>
  <span class="nt">--ecs-profile</span> swift <span class="se">\</span>
  <span class="nt">--cluster-config</span> test-ecs <span class="se">\</span>
  <span class="nt">--keypair</span> aws-ec2-key <span class="se">\</span>
  <span class="nt">--capability-iam</span> <span class="se">\</span>
  <span class="nt">--instance-type</span> t2.micro <span class="se">\</span>
  <span class="nt">--size</span> 1 <span class="se">\</span>
  <span class="nt">--port</span> 22
</code></pre></div></div>

<p>In addition to EC2 Instances, other resources created by default include:</p>

<ul>
  <li>Autoscaling Group</li>
  <li>Autoscaling Launch Configuration</li>
  <li>EC2 VPC</li>
  <li>EC2 Internet Gateway</li>
  <li>EC2 VPC Gateway Attachment</li>
  <li>EC2 Route Table</li>
  <li>EC2 Route</li>
  <li>2 Public EC2 Subnets</li>
  <li>2 EC2 SubnetRouteTableAssociations</li>
  <li>EC2 Security Group</li>
</ul>

<h2 id="create-ecs-repository">Create ECS Repository</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># registry (in the form $registryId.dkr.ecr.$region.amazonaws.com)</span>
<span class="nv">region</span><span class="o">=</span><span class="si">$(</span>aws configure get region<span class="si">)</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>
<span class="nv">registry</span><span class="o">=</span><span class="s2">"</span><span class="nv">$registryId</span><span class="s2">.dkr.ecr.</span><span class="nv">$region</span><span class="s2">.amazonaws.com"</span>

<span class="c"># repository</span>
<span class="nv">repository</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-repositories | jq <span class="nt">-r</span> <span class="s2">".repositories[] | select(.repositoryName==</span><span class="se">\"</span><span class="nv">$image</span><span class="se">\"</span><span class="s2">) | .repositoryUri"</span><span class="si">)</span>

<span class="c"># create if it does not exist</span>
<span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$repository</span><span class="s2">"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> aws ecr create-repository <span class="nt">--repository-name</span> <span class="nv">$image</span>
<span class="nv">repository</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-repositories | jq <span class="nt">-r</span> <span class="s2">".repositories[] | select(.repositoryName==</span><span class="se">\"</span><span class="nv">$image</span><span class="se">\"</span><span class="s2">) | .repositoryUri"</span><span class="si">)</span>
</code></pre></div></div>

<h2 id="create-docker-image">Create Docker image</h2>

<h3 id="dockerfile">Dockerfile</h3>

<p>Create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> with the following contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOT</span><span class="sh">" &gt; ./Dockerfile
# See https://hub.docker.com/_/oraclelinux for all supported 
# Oracle Linux tags from Docker Hub.

# this image will be the actual running container
FROM  oraclelinux:8

LABEL Name=ecs-test

## System Config
ENV TZ=America/Los_Angeles

# Packages
RUN yum -y install bind-utils 

CMD ["/bin/ping", "localhost"]
</span><span class="no">EOT
</span></code></pre></div></div>

<h3 id="build-image">Build Image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Build image ..."</span>
docker build <span class="nt">--tag</span> <span class="k">${</span><span class="nv">image</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span> <span class="nb">.</span>
</code></pre></div></div>

<h3 id="tag-image">Tag Image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repository</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-repositories | jq <span class="nt">-r</span> <span class="s2">".repositories[] | select(.repositoryName==</span><span class="se">\"</span><span class="nv">$image</span><span class="se">\"</span><span class="s2">) | .repositoryUri"</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"Tag image ..."</span>
docker tag <span class="k">${</span><span class="nv">image</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span> <span class="k">${</span><span class="nv">repository</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span>
</code></pre></div></div>

<h3 id="publish-image">Publish Image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># refresh AWS token for docker</span>
aws ecr get-login-password <span class="nt">--region</span> <span class="nv">$region</span> <span class="se">\</span>
  | docker login <span class="nt">--username</span> AWS <span class="nt">--password-stdin</span> <span class="nv">$registry</span>

<span class="c"># push image</span>
<span class="nb">echo</span> <span class="s2">"Push image ..."</span>
docker push <span class="k">${</span><span class="nv">repository</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span>
</code></pre></div></div>

<h3 id="verify">Verify</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># verify</span>
<span class="nv">red</span><span class="o">=</span><span class="s1">'\e[0;31m'</span>    
<span class="nv">green</span><span class="o">=</span><span class="s1">'\e[0;32m'</span>    
<span class="nv">clear</span><span class="o">=</span><span class="s1">'\e[0m'</span>

<span class="nv">pushed_tag</span><span class="o">=</span><span class="si">$(</span>reg tags <span class="k">${</span><span class="nv">repository</span><span class="k">}</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="k">${</span><span class="nv">tag</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">pushed_tag</span><span class="k">}</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="k">${</span><span class="nv">tag</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">printf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">red</span><span class="k">}</span><span class="s2">Failed</span><span class="k">${</span><span class="nv">clear</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">echo
</span><span class="k">else    
    </span><span class="nb">printf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">green</span><span class="k">}</span><span class="s2">Success</span><span class="k">${</span><span class="nv">clear</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">echo
</span><span class="k">fi</span>
</code></pre></div></div>

<h2 id="launch-ecs-task">Launch ECS Task</h2>

<h3 id="service-description">Service Description</h3>

<p>Create <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOT</span><span class="sh"> &gt; ./docker-compose.yml
version: '3'

services:
  ecs-test:
    image: </span><span class="nv">$repository</span><span class="sh">:</span><span class="nv">$tag</span><span class="sh">

    logging:
      driver: awslogs
      options: 
        awslogs-group: test-ecs
        awslogs-region: us-west-2
        awslogs-stream-prefix: test
</span><span class="no">EOT
</span></code></pre></div></div>

<h3 id="task-definition">Task Definition</h3>

<p>Create <code class="language-plaintext highlighter-rouge">ecs-params.yml</code> file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOT</span><span class="sh"> &gt; ./ecs-params.yml
version: 1
task_definition:
  services:
    ecs-test:
      cpu_shares: 100
      mem_limit: 524288000
</span><span class="no">EOT
</span></code></pre></div></div>

<h3 id="launch-service">Launch Service</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create service</span>
ecs-cli compose <span class="se">\</span>
    <span class="nt">--project-name</span> <span class="nv">$service_name</span> <span class="se">\</span>
    <span class="nt">--file</span> ./docker-compose.yml <span class="se">\</span>
    <span class="nt">--ecs-params</span> ./ecs-params.yml <span class="se">\</span>
    service up <span class="se">\</span>
    <span class="nt">--create-log-groups</span> <span class="se">\</span>
    <span class="nt">--cluster-config</span> test-ecs <span class="se">\</span>
    <span class="nt">--ecs-profile</span> swift
</code></pre></div></div>

<p>Login to the first task of the <code class="language-plaintext highlighter-rouge">test</code> service:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CLUSTER</span><span class="o">=</span>test-ecs
<span class="nv">SERVICE</span><span class="o">=</span><span class="nb">test

</span><span class="nv">TASK_ARN</span><span class="o">=</span><span class="si">$(</span> aws ecs list-tasks <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$CLUSTER</span> <span class="nt">--service-name</span><span class="o">=</span><span class="nv">$SERVICE</span> | jq <span class="nt">-r</span> <span class="s1">'.taskArns[0]'</span> <span class="si">)</span>
<span class="nv">CONTAINER_INSTANCE_ARN</span><span class="o">=</span><span class="si">$(</span> aws ecs describe-tasks <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$CLUSTER</span> <span class="nt">--tasks</span> <span class="nv">$TASK_ARN</span> | jq <span class="nt">-r</span> <span class="s1">'.tasks[0].containerInstanceArn'</span> <span class="si">)</span>

<span class="nv">EC2_INSTANCE</span><span class="o">=</span><span class="si">$(</span> aws ecs describe-container-instances <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$CLUSTER</span> <span class="nt">--container-instances</span> <span class="nv">$CONTAINER_INSTANCE_ARN</span> | jq <span class="nt">-r</span> <span class="s1">'.containerInstances[0].ec2InstanceId'</span> <span class="si">)</span>
<span class="nv">EC2_IP</span><span class="o">=</span><span class="si">$(</span> aws ec2 describe-instances <span class="nt">--instance-ids</span> <span class="nv">$EC2_INSTANCE</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].PublicIpAddress'</span> <span class="si">)</span>

<span class="nv">EC2_KEY</span><span class="o">=</span><span class="s2">"~/.ssh/aws-ec2-key"</span>

ssh <span class="nt">-i</span> <span class="nv">$EC2_KEY</span> ec2-user@<span class="nv">$EC2_IP</span> <span class="nt">-t</span> <span class="s1">'bash -c "docker exec -it $( docker ps -a -q -f name=ecs-'</span><span class="nv">$SERVICE</span><span class="s1">' | head -n 1 ) bash"'</span>
</code></pre></div></div>

<p>Check task logs:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">task_id</span><span class="o">=</span><span class="si">$(</span> aws ecs list-tasks <span class="nt">--cluster</span><span class="o">=</span>test-ecs <span class="nt">--service-name</span><span class="o">=</span><span class="nb">test</span> | jq <span class="nt">-r</span> <span class="s1">'.taskArns[0]'</span> | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">"/"</span> <span class="nt">-f</span> 3 <span class="si">)</span>
ecs-cli logs <span class="nt">--task-id</span> <span class="nv">$task_id</span>
</code></pre></div></div>

<h2 id="cleanup">Cleanup</h2>

<blockquote>
  <p><strong>WARNING</strong>: These scripts destroy the created AWS resources. Proceed with caution!!!</p>
</blockquote>

<h3 id="stop-services">Stop services</h3>

<p>Stop running tasks and remove service:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecs-cli compose <span class="nt">--project-name</span> <span class="nb">test </span>service down
</code></pre></div></div>

<h3 id="delete-cluster">Delete cluster</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecs-cli down <span class="se">\</span>
  <span class="nt">--force</span>  <span class="se">\</span>
  <span class="nt">--ecs-profile</span> swift <span class="se">\</span>
  <span class="nt">--cluster-config</span> test-ecs
</code></pre></div></div>

<h3 id="delete-log-group">Delete log group</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws logs delete-log-group <span class="nt">--log-group-name</span> test-ecs
</code></pre></div></div>

<h3 id="delete-image">Delete image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repo</span><span class="o">=</span>ecs-test
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>

aws ecr batch-delete-image <span class="se">\</span>
  <span class="nt">--registry-id</span> <span class="nv">$registryId</span> <span class="se">\</span>
  <span class="nt">--repository-name</span> <span class="nv">$repo</span> <span class="se">\</span>
  <span class="nt">--image-ids</span> <span class="nv">imageTag</span><span class="o">=</span>latest
</code></pre></div></div>

<h3 id="delete-image-repository">Delete image repository</h3>

<blockquote>
  <p>This will delete all images in the repo and the repo itself</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repo</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>

aws ecr delete-repository <span class="se">\</span>
  <span class="nt">--force</span> <span class="se">\</span>
  <span class="nt">--registry-id</span> <span class="nv">$registryId</span> <span class="se">\</span>
  <span class="nt">--repository-name</span> <span class="nv">$repo</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[The Amazon ECS Command Line Interface (CLI) is a command line tool for Amazon Elastic Container Service (Amazon ECS) that provides high-level commands to simplify creating, updating, and monitoring clusters and tasks from a local development environment.]]></summary></entry><entry><title type="html">Launch ECS container using AWS CLI - Step 5 - Cleanup</title><link href="/launch-ecs-container-aws-cli-step-5-cleanup/" rel="alternate" type="text/html" title="Launch ECS container using AWS CLI - Step 5 - Cleanup" /><published>2021-05-12T00:00:00-07:00</published><updated>2021-05-12T00:00:00-07:00</updated><id>/launch-ecs-container-aws-cli-step-5-cleanup</id><content type="html" xml:base="/launch-ecs-container-aws-cli-step-5-cleanup/"><![CDATA[<p>Delete all the resources that were created in this series.</p>

<p>This is the last part of a multi-post thread involving these steps:</p>

<ol>
  <li><a href="/launch-ecs-container-aws-cli-step-1-network-setup">Network Setup</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance">Launch EC2 Instance</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-3-create-docker-image">Create Docker Image</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-4-create-service">Create Service</a></li>
  <li>Cleanup (this post)</li>
</ol>

<h2 id="define-names">Define Names</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># service</span>
<span class="nv">service</span><span class="o">=</span><span class="s2">"ecs-test-service"</span>
<span class="nv">task</span><span class="o">=</span><span class="s2">"ecs-test"</span>

<span class="c"># task definition</span>
<span class="nv">task_def_family</span><span class="o">=</span><span class="s2">"ecs-test"</span>

<span class="c"># cluster</span>
<span class="nv">cluster</span><span class="o">=</span><span class="s2">"cluster-ecs"</span>

<span class="c"># IAM</span>
<span class="nv">instance_profile</span><span class="o">=</span><span class="s2">"instance-profile-ecs"</span>
<span class="nv">instance_role</span><span class="o">=</span><span class="s2">"instance-role-ecs"</span>

<span class="c"># EC2</span>
<span class="nv">instance</span><span class="o">=</span><span class="s2">"instance-ecs"</span>

<span class="c"># VPC</span>
<span class="nv">vpc</span><span class="o">=</span><span class="s2">"vpc-ecs"</span>

<span class="c"># Subnets</span>
<span class="nv">subnet_1</span><span class="o">=</span><span class="s2">"subnet-ecs-1"</span>
<span class="nv">subnet_2</span><span class="o">=</span><span class="s2">"subnet-ecs-2"</span>

<span class="c"># Internet Gateway</span>
<span class="nv">internet_gateway</span><span class="o">=</span><span class="s2">"igw-ecs"</span>

<span class="c"># Route Table</span>
<span class="nv">route_table</span><span class="o">=</span><span class="s2">"rtb-ecs"</span>

<span class="c"># Security Group</span>
<span class="nv">security_group</span><span class="o">=</span><span class="s2">"security-ecs"</span>
</code></pre></div></div>

<h2 id="cleanup">Cleanup</h2>

<p>Delete all resources in reverse order of creation:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Delete service </span><span class="nv">$service</span><span class="s2"> ..."</span>
aws ecs delete-service <span class="nt">--force</span> <span class="nt">--cluster</span> <span class="nv">$cluster</span> <span class="nt">--service</span> <span class="nv">$service</span> 

<span class="nb">echo</span> <span class="s2">"Deregister task definition </span><span class="nv">$task</span><span class="s2"> ..."</span>
<span class="nv">task_def_arn</span><span class="o">=</span><span class="si">$(</span>aws ecs list-task-definitions <span class="nt">--sort</span> DESC <span class="nt">--family-prefix</span> <span class="nv">$task_def_family</span> | jq <span class="nt">-r</span> <span class="s1">'.taskDefinitionArns[0]'</span><span class="si">)</span>
aws ecs deregister-task-definition <span class="nt">--task-definition</span> <span class="nv">$task_def_arn</span>

<span class="nb">echo</span> <span class="s2">"Delete EC2 Instance ..."</span>
<span class="nv">instance_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="se">\</span>
    <span class="nt">--filters</span> <span class="se">\</span>
        <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$instance</span> <span class="se">\</span>
        <span class="nv">Name</span><span class="o">=</span>instance-state-name,Values<span class="o">=</span>running <span class="se">\</span>
| jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].InstanceId'</span><span class="si">)</span>

aws ec2 terminate-instances <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>

<span class="nb">echo</span> <span class="s2">"Wait until EC2 instance terminates ..."</span>
aws ec2 <span class="nb">wait </span>instance-terminated <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>

<span class="nb">echo</span> <span class="s2">"Delete EC2 Instance Profile ..."</span>
aws iam remove-role-from-instance-profile <span class="se">\</span>
    <span class="nt">--instance-profile-name</span> <span class="nv">$instance_profile</span> <span class="se">\</span>
    <span class="nt">--role-name</span> <span class="nv">$instance_role</span>

aws iam delete-instance-profile <span class="nt">--instance-profile-name</span> <span class="nv">$instance_profile</span>

<span class="nb">echo</span> <span class="s2">"Delete EC2 Instance Role ..."</span>
aws iam detach-role-policy <span class="se">\</span>
    <span class="nt">--role-name</span> <span class="nv">$instance_role</span> <span class="se">\</span>
    <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

aws iam delete-role <span class="nt">--role-name</span> <span class="nv">$instance_role</span>

<span class="nb">echo</span> <span class="s2">"Delete ECS cluster ..."</span>
aws ecs delete-cluster <span class="nt">--cluster</span> <span class="nv">$cluster</span>

<span class="nb">echo</span> <span class="s2">"Delete Security Group ..."</span>
<span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>
aws ec2 delete-security-group <span class="nt">--group-id</span> <span class="nv">$group_id</span>

<span class="nb">echo</span> <span class="s2">"Delete Subnets ..."</span>
<span class="nv">subnet_1_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
aws ec2 delete-subnet <span class="nt">--subnet-id</span> <span class="nv">$subnet_1_id</span>

<span class="nv">subnet_2_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_2</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
aws ec2 delete-subnet <span class="nt">--subnet-id</span> <span class="nv">$subnet_2_id</span>

<span class="nb">echo</span> <span class="s2">"Delete Route Table ..."</span>
<span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>
aws ec2 delete-route-table <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span>

<span class="nb">echo</span> <span class="s2">"Delete Internet Gateway ..."</span>
<span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>
<span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>
aws ec2 detach-internet-gateway <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span> <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span>

aws ec2 delete-internet-gateway <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span>

<span class="nb">echo</span> <span class="s2">"Delete VPC ..."</span>
aws ec2 delete-vpc <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span>

</code></pre></div></div>

<h2 id="-danger-">!!! DANGER !!!</h2>

<h3 id="delete-latest-image">Delete <code class="language-plaintext highlighter-rouge">latest</code> image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repo</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>

aws ecr batch-delete-image <span class="se">\</span>
  <span class="nt">--registry-id</span> <span class="nv">$registryId</span> <span class="se">\</span>
  <span class="nt">--repository-name</span> <span class="nv">$repo</span> <span class="se">\</span>
  <span class="nt">--image-ids</span> <span class="nv">imageTag</span><span class="o">=</span>latest
</code></pre></div></div>

<h3 id="delete-repository">Delete repository</h3>

<blockquote>
  <p>NOTE: This will delete all images in the repo and the repo itself:</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repo</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>

aws ecr delete-repository <span class="se">\</span>
  <span class="nt">--force</span> <span class="se">\</span>
  <span class="nt">--registry-id</span> <span class="nv">$registryId</span> <span class="se">\</span>
  <span class="nt">--repository-name</span> <span class="nv">$repo</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Delete all the resources that were created in this series. This is the last part of a multi-post thread involving these steps: Network Setup Launch EC2 Instance Create Docker Image Create Service Cleanup (this post)]]></summary></entry><entry><title type="html">Launch ECS container using AWS CLI - Step 4 - Create Service</title><link href="/launch-ecs-container-aws-cli-step-4-create-service/" rel="alternate" type="text/html" title="Launch ECS container using AWS CLI - Step 4 - Create Service" /><published>2021-05-11T00:00:00-07:00</published><updated>2021-05-11T00:00:00-07:00</updated><id>/launch-ecs-container-aws-cli-step-4-create-service</id><content type="html" xml:base="/launch-ecs-container-aws-cli-step-4-create-service/"><![CDATA[<p>Setup an ECS container repository, create a Docker image, and upload the Docker image to the repository.</p>

<p>This is part of a multi-post thread involving these steps:</p>

<ol>
  <li><a href="/launch-ecs-container-aws-cli-step-1-network-setup">Network Setup</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance">Launch EC2 Instance</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-3-create-docker-image">Create Docker Image</a></li>
  <li>Create Service (this post)</li>
  <li><a href="/launch-ecs-container-aws-cli-step-5-cleanup">Cleanup</a></li>
</ol>

<h2 id="define-names">Define Names</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># registry (in the form $registryId.dkr.ecr.$region.amazonaws.com)</span>
<span class="nv">region</span><span class="o">=</span><span class="si">$(</span>aws configure get region<span class="si">)</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>
<span class="nv">registry</span><span class="o">=</span><span class="s2">"</span><span class="nv">$registryId</span><span class="s2">.dkr.ecr.</span><span class="nv">$region</span><span class="s2">.amazonaws.com"</span>

<span class="nv">cluster</span><span class="o">=</span><span class="s2">"cluster-ecs"</span>
<span class="nv">service</span><span class="o">=</span><span class="s2">"ecs-test-service"</span>
<span class="nv">task_def_family</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">task</span><span class="o">=</span><span class="s2">"ecs-test"</span>
</code></pre></div></div>

<h2 id="create-task-definition">Create Task Definition</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOT</span><span class="sh"> &gt; ./test-ecs-task-def.json
{
    "family": "ecs-test",
    "containerDefinitions": [
        {
            "image": "</span><span class="nv">$registry</span><span class="sh">/ecs-test:latest",
            "name": "test",
            "cpu": 512,
            "memory": 512, 
            "essential": true
        }
    ]
}
</span><span class="no">EOT
</span></code></pre></div></div>

<h2 id="register-task-definition">Register Task Definition</h2>

<p>Register task definition:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Register task definition ..."</span>
aws ecs register-task-definition <span class="nt">--cli-input-json</span> file://test-ecs-task-def.json
</code></pre></div></div>

<p>To list task definitions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ecs list-task-definitions
</code></pre></div></div>

<h2 id="create-service">Create Service</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">task_def_arn</span><span class="o">=</span><span class="si">$(</span>aws ecs list-task-definitions <span class="nt">--sort</span> DESC <span class="nt">--family-prefix</span> <span class="nv">$task_def_family</span> | jq <span class="nt">-r</span> <span class="s1">'.taskDefinitionArns[0]'</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"Launch service </span><span class="nv">$service</span><span class="s2"> ..."</span>
aws ecs create-service <span class="se">\</span>
    <span class="nt">--cluster</span> <span class="nv">$cluster</span> <span class="se">\</span>
    <span class="nt">--service-name</span> <span class="nv">$service</span> <span class="se">\</span>
    <span class="nt">--task-definition</span> <span class="nv">$task_def_arn</span> <span class="se">\</span>
    <span class="nt">--desired-count</span> 1
</code></pre></div></div>

<h2 id="connect-to-the-container">Connect to the Container</h2>

<p>Find EC2 instance IP address:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">task_arn</span><span class="o">=</span><span class="si">$(</span>aws ecs list-tasks <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$cluster</span> <span class="nt">--service-name</span><span class="o">=</span><span class="nv">$service</span> | jq <span class="nt">-r</span> <span class="s1">'.taskArns[0]'</span><span class="si">)</span>
<span class="nv">container_instance_arn</span><span class="o">=</span><span class="si">$(</span>aws ecs describe-tasks <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$cluster</span> <span class="nt">--tasks</span> <span class="nv">$task_arn</span> | jq <span class="nt">-r</span> <span class="s1">'.tasks[0].containerInstanceArn'</span><span class="si">)</span>

<span class="nv">ec2_instance</span><span class="o">=</span><span class="si">$(</span>aws ecs describe-container-instances <span class="nt">--cluster</span><span class="o">=</span><span class="nv">$cluster</span> <span class="nt">--container-instances</span> <span class="nv">$container_instance_arn</span> | jq <span class="nt">-r</span> <span class="s1">'.containerInstances[0].ec2InstanceId'</span><span class="si">)</span>
<span class="nv">ec2_ip</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--instance-ids</span> <span class="nv">$ec2_instance</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].PublicIpAddress'</span><span class="si">)</span>

<span class="nv">ec2_key</span><span class="o">=</span><span class="s2">"~/.ssh/aws-ec2-key"</span>
</code></pre></div></div>

<p>Connect to the EC2 instance:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> <span class="nv">$ec2_key</span> ec2-user@<span class="nv">$ec2_ip</span>
</code></pre></div></div>

<p>Connect to the Docker container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># On the EC2 instance</span>
<span class="nv">task</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">container_id</span><span class="o">=</span><span class="si">$(</span>docker ps <span class="nt">-a</span> <span class="nt">-q</span> <span class="nt">-f</span> <span class="nv">name</span><span class="o">=</span>ecs-<span class="nv">$task</span> | <span class="nb">head</span> <span class="nt">-n</span> 1<span class="si">)</span>
docker <span class="nb">exec</span> <span class="nt">-it</span> <span class="nv">$container_id</span> bash
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Setup an ECS container repository, create a Docker image, and upload the Docker image to the repository. This is part of a multi-post thread involving these steps: Network Setup Launch EC2 Instance Create Docker Image Create Service (this post) Cleanup]]></summary></entry><entry><title type="html">Launch ECS container using AWS CLI - Step 3 - Create Docker Image</title><link href="/launch-ecs-container-aws-cli-step-3-create-docker-image/" rel="alternate" type="text/html" title="Launch ECS container using AWS CLI - Step 3 - Create Docker Image" /><published>2021-04-01T00:00:00-07:00</published><updated>2021-04-01T00:00:00-07:00</updated><id>/launch-ecs-container-aws-cli-step-3-create-docker-image</id><content type="html" xml:base="/launch-ecs-container-aws-cli-step-3-create-docker-image/"><![CDATA[<p>Setup an ECS container repository, create a Docker image, and upload the Docker image to the repository.</p>

<p>This is part of a multi-post thread involving these steps:</p>

<ol>
  <li><a href="/launch-ecs-container-aws-cli-step-1-network-setup">Network Setup</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance">Launch EC2 Instance</a></li>
  <li>Create Docker Image (this post)</li>
  <li><a href="/launch-ecs-container-aws-cli-step-4-create-service">Create Service</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-5-cleanup">Cleanup</a></li>
</ol>

<h2 id="define-names">Define names</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># registry (in the form $registryId.dkr.ecr.$region.amazonaws.com)</span>
<span class="nv">region</span><span class="o">=</span><span class="si">$(</span>aws configure get region<span class="si">)</span>
<span class="nv">registryId</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-registry | jq <span class="nt">-r</span> <span class="s1">'.registryId'</span><span class="si">)</span>
<span class="nv">registry</span><span class="o">=</span><span class="s2">"</span><span class="nv">$registryId</span><span class="s2">.dkr.ecr.</span><span class="nv">$region</span><span class="s2">.amazonaws.com"</span>

<span class="c"># image</span>
<span class="nv">image</span><span class="o">=</span><span class="s2">"ecs-test"</span>
<span class="nv">tag</span><span class="o">=</span><span class="s2">"latest"</span>
</code></pre></div></div>

<h2 id="create-ecs-repository">Create ECS Repository</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Create repository </span><span class="nv">$image</span><span class="s2"> in registry </span><span class="nv">$registry</span><span class="s2"> ..."</span>
aws ecr create-repository <span class="nt">--repository-name</span> <span class="nv">$image</span>
<span class="nv">repository</span><span class="o">=</span><span class="si">$(</span>aws ecr describe-repositories | jq <span class="nt">-r</span> <span class="s2">".repositories[] | select(.repositoryName==</span><span class="se">\"</span><span class="nv">$image</span><span class="se">\"</span><span class="s2">) | .repositoryUri"</span><span class="si">)</span>
</code></pre></div></div>

<h2 id="create-docker-image">Create Docker Image</h2>

<h3 id="dockerfile">Dockerfile</h3>

<p>Create a <code class="language-plaintext highlighter-rouge">Dockerfile</code> with the following contents:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOT</span><span class="sh">" &gt; ./Dockerfile
# See https://hub.docker.com/_/oraclelinux for all supported 
# Oracle Linux tags from Docker Hub.

# this image will be the actual running container
FROM  oraclelinux:8

LABEL Name=ecs-test

## System Config
ENV TZ=America/Los_Angeles

# Packages
RUN yum -y install bind-utils 

CMD ["/bin/ping", "localhost"]
</span><span class="no">EOT
</span></code></pre></div></div>

<h3 id="build-image">Build Image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Build image ..."</span>
docker build <span class="nt">--tag</span> <span class="k">${</span><span class="nv">image</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span> <span class="nb">.</span>
</code></pre></div></div>

<h3 id="tag-image">Tag Image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"Tag image ..."</span>
docker tag <span class="k">${</span><span class="nv">image</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span> <span class="k">${</span><span class="nv">repository</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span>
</code></pre></div></div>

<h2 id="publish-image">Publish Image</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># refresh AWS token for docker</span>
aws ecr get-login-password <span class="nt">--region</span> <span class="nv">$region</span> <span class="se">\</span>
  | docker login <span class="nt">--username</span> AWS <span class="nt">--password-stdin</span> <span class="nv">$registry</span>

<span class="c"># push image</span>
<span class="nb">echo</span> <span class="s2">"Push image ..."</span>
docker push <span class="k">${</span><span class="nv">repository</span><span class="k">}</span>:<span class="k">${</span><span class="nv">tag</span><span class="k">}</span>
</code></pre></div></div>

<h2 id="verify">Verify</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># verify</span>
<span class="nv">red</span><span class="o">=</span><span class="s1">'\e[0;31m'</span>    
<span class="nv">green</span><span class="o">=</span><span class="s1">'\e[0;32m'</span>    
<span class="nv">clear</span><span class="o">=</span><span class="s1">'\e[0m'</span>

<span class="nv">pushed_tag</span><span class="o">=</span><span class="si">$(</span>reg tags <span class="k">${</span><span class="nv">repository</span><span class="k">}</span> | <span class="nb">grep</span> <span class="s2">"</span><span class="k">${</span><span class="nv">tag</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">"</span><span class="k">${</span><span class="nv">pushed_tag</span><span class="k">}</span><span class="s2">"</span> <span class="o">!=</span> <span class="s2">"</span><span class="k">${</span><span class="nv">tag</span><span class="k">}</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">printf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">red</span><span class="k">}</span><span class="s2">Failed</span><span class="k">${</span><span class="nv">clear</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">echo
</span><span class="k">else    
    </span><span class="nb">printf</span> <span class="s2">"</span><span class="k">${</span><span class="nv">green</span><span class="k">}</span><span class="s2">Success</span><span class="k">${</span><span class="nv">clear</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">echo
</span><span class="k">fi</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Setup an ECS container repository, create a Docker image, and upload the Docker image to the repository. This is part of a multi-post thread involving these steps: Network Setup Launch EC2 Instance Create Docker Image (this post) Create Service Cleanup]]></summary></entry><entry><title type="html">Launch ECS container using AWS CLI - Step 2 - Launch EC2 Instance</title><link href="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance/" rel="alternate" type="text/html" title="Launch ECS container using AWS CLI - Step 2 - Launch EC2 Instance" /><published>2021-03-02T00:00:00-08:00</published><updated>2021-03-02T00:00:00-08:00</updated><id>/launch-ecs-container-aws-cli-step-2-launch-ec2-instance</id><content type="html" xml:base="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance/"><![CDATA[<p>Create an “EC2 Contaner Service” (ECS) cluster with one EC2 instance. This will be used to host ECS tasks / container instances.</p>

<p>This is part of a multi-post thread involving these steps:</p>

<ol>
  <li><a href="/launch-ecs-container-aws-cli-step-1-network-setup">Network Setup</a></li>
  <li>Launch EC2 Instance (this post)</li>
  <li><a href="/launch-ecs-container-aws-cli-step-3-create-docker-image">Create Docker Image</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-4-create-service">Create Service</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-5-cleanup">Cleanup</a></li>
</ol>

<h2 id="define-names">Define names</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Subnets</span>
<span class="nv">subnet_1</span><span class="o">=</span><span class="s2">"subnet-ecs-1"</span>
<span class="nv">subnet_2</span><span class="o">=</span><span class="s2">"subnet-ecs-2"</span>

<span class="c"># Security Group</span>
<span class="nv">security_group</span><span class="o">=</span><span class="s2">"security-ecs"</span>

<span class="c"># cluster</span>
<span class="nv">cluster</span><span class="o">=</span><span class="s2">"cluster-ecs"</span>

<span class="c"># IAM</span>
<span class="nv">instance_role</span><span class="o">=</span><span class="s2">"instance-role-ecs"</span>
<span class="nv">instance_profile</span><span class="o">=</span><span class="s2">"instance-profile-ecs"</span>

<span class="c"># EC2</span>
<span class="nv">instance</span><span class="o">=</span><span class="s2">"instance-ecs"</span>

<span class="c"># SSH access key</span>
<span class="nv">key</span><span class="o">=</span><span class="s2">"aws-ec2-key"</span>
</code></pre></div></div>

<h2 id="ecs-cluster">ECS Cluster</h2>

<p>Create ECS Cluster:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Get IDs</span>
<span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>
<span class="nv">subnet_1_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"Create ECS cluster </span><span class="nv">$cluster</span><span class="s2"> ..."</span>
aws ecs create-cluster <span class="nt">--cluster-name</span> <span class="nv">$cluster</span>
</code></pre></div></div>

<h2 id="ec2-instance-role">EC2 Instance Role</h2>

<p>Create an “assume role” policy configuration and save it to a file <code class="language-plaintext highlighter-rouge">instance-policy.json</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOT</span><span class="sh"> &gt; ./instance-policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
</span><span class="no">EOT
</span></code></pre></div></div>

<p>Create the EC2 Instance Role:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># EC2 Instance Role</span>
<span class="nb">echo</span> <span class="s2">"Create EC2 Instance Role ..."</span>
aws iam create-role <span class="se">\</span>
    <span class="nt">--role-name</span> <span class="nv">$instance_role</span> <span class="se">\</span>
    <span class="nt">--assume-role-policy-document</span> file://instance-policy.json
</code></pre></div></div>

<p>… and attach the <code class="language-plaintext highlighter-rouge">AmazonEC2ContainerServiceforEC2Role</code> policy to the instance role:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws iam attach-role-policy <span class="se">\</span>
    <span class="nt">--role-name</span> <span class="nv">$instance_role</span> <span class="se">\</span>
    <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
</code></pre></div></div>

<p>When you attach a managed policy to a role, the managed policy becomes part of the role’s permission (access) policy.</p>

<h2 id="ec2-instance-profile">EC2 Instance Profile</h2>

<p>Create EC2 Instance Profile:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># EC2 Instance Profile</span>
<span class="nb">echo</span> <span class="s2">"Create EC2 Instance Profile ..."</span>
aws iam create-instance-profile <span class="nt">--instance-profile-name</span> <span class="nv">$instance_profile</span>

aws iam add-role-to-instance-profile <span class="se">\</span>
    <span class="nt">--instance-profile-name</span> <span class="nv">$instance_profile</span> <span class="se">\</span>
    <span class="nt">--role-name</span> <span class="nv">$instance_role</span>

aws iam list-instance-profiles

<span class="nb">echo</span> <span class="s2">"Wait 15 seconds for new instance profile to replicate in AWS ..."</span>
<span class="nb">sleep </span>15
</code></pre></div></div>

<h2 id="ec2-instance">EC2 Instance</h2>

<p>Create a “block device mappings” configuration and save it to a file <code class="language-plaintext highlighter-rouge">instance-block-device-mappings.json</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOT</span><span class="sh"> &gt; ./instance-block-device-mappings.json
[
    {
        "DeviceName": "/dev/sdf",
        "Ebs": {
            "DeleteOnTermination": true,
            "VolumeSize": 50
        }
    }
]
</span><span class="no">EOT
</span></code></pre></div></div>

<p>Create an “instance startup” script and save it to a file <code class="language-plaintext highlighter-rouge">instance-user-data.sh</code>.  You can do anything in the startup script. In our case we use it to generate <code class="language-plaintext highlighter-rouge">/etc/ecs/ecs.config</code>.</p>

<blockquote>
  <p>NOTE: This script runs on the EC2 instance after it launches.</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="sh">"</span><span class="no">EOT</span><span class="sh">" &gt; ./instance-user-data.sh
#!/bin/bash
cluster="cluster-ecs"

echo "ECS_CLUSTER=</span><span class="nv">$cluster</span><span class="sh">" &gt;&gt; /etc/ecs/ecs.config
echo "ECS_CONTAINER_INSTANCE_TAGS={</span><span class="se">\"</span><span class="sh">ECS_CLUSTER</span><span class="se">\"</span><span class="sh">: </span><span class="se">\"</span><span class="nv">$cluster</span><span class="se">\"</span><span class="sh">}" &gt;&gt; /etc/ecs/ecs.config
echo ECS_AVAILABLE_LOGGING_DRIVERS='["json-file", "awslogs"]' &gt;&gt; /etc/ecs/ecs.config
</span><span class="no">EOT
</span></code></pre></div></div>

<p>Now we have everything that’s needed. Launch the EC2 instance in subnet 1:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># EC2 Instance</span>
<span class="nb">echo</span> <span class="s2">"Launch EC2 instance in subnet 1: </span><span class="nv">$subnet_1_id</span><span class="s2"> ..."</span>

<span class="nv">json</span><span class="o">=</span><span class="si">$(</span>aws ec2 run-instances <span class="se">\</span>
    <span class="nt">--subnet-id</span> <span class="nv">$subnet_1_id</span> <span class="se">\</span>
    <span class="nt">--security-group-ids</span> <span class="nv">$group_id</span> <span class="se">\</span>
    <span class="nt">--image-id</span> resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id <span class="se">\</span>
    <span class="nt">--instance-type</span> t2.micro <span class="se">\</span>
    <span class="nt">--count</span> 1 <span class="se">\</span>
    <span class="nt">--key-name</span> <span class="nv">$key</span> <span class="se">\</span>
    <span class="nt">--iam-instance-profile</span> <span class="nv">Name</span><span class="o">=</span><span class="nv">$instance_profile</span> <span class="se">\</span>
    <span class="nt">--user-data</span> file://instance-user-data.sh <span class="se">\</span>
    <span class="nt">--block-device-mappings</span> file://instance-block-device-mappings.json <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=instance,Tags=[{Key=Name,Value='</span><span class="nv">$instance</span><span class="s1">'}]'</span><span class="si">)</span>

<span class="nv">instance_id</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="nv">$json</span> | jq <span class="nt">-r</span> <span class="s1">'.Instances[0].InstanceId'</span><span class="si">)</span>

aws ec2 <span class="nb">wait </span>instance-exists <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>    
<span class="nb">echo</span> <span class="s2">"  Instance created ..."</span>

aws ec2 <span class="nb">wait </span>instance-running <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>    
<span class="nb">echo</span> <span class="s2">"  Instance is running ..."</span>

aws ec2 <span class="nb">wait </span>instance-status-ok <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>    
<span class="nb">echo</span> <span class="s2">"  Instance is ready ..."</span>

</code></pre></div></div>

<h2 id="verify">Verify</h2>

<p>Check that EC2 container instance has checked in to the ECS Cluster:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">cluster</span><span class="o">=</span><span class="s2">"cluster-ecs"</span>
aws ecs list-container-instances <span class="nt">--cluster</span> <span class="nv">$cluster</span>
</code></pre></div></div>

<p>Also should be reported in <code class="language-plaintext highlighter-rouge">registeredContainerInstancesCount</code> when describing the ECS cluster:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">cluster</span><span class="o">=</span><span class="s2">"cluster-ecs"</span>
aws ecs describe-clusters <span class="nt">--cluster</span> <span class="nv">$cluster</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Create an “EC2 Contaner Service” (ECS) cluster with one EC2 instance. This will be used to host ECS tasks / container instances. This is part of a multi-post thread involving these steps: Network Setup Launch EC2 Instance (this post) Create Docker Image Create Service Cleanup]]></summary></entry><entry><title type="html">Launch ECS container using AWS CLI - Step 1 - Network Setup</title><link href="/launch-ecs-container-aws-cli-step-1-network-setup/" rel="alternate" type="text/html" title="Launch ECS container using AWS CLI - Step 1 - Network Setup" /><published>2021-02-06T00:00:00-08:00</published><updated>2021-02-06T00:00:00-08:00</updated><id>/launch-ecs-container-aws-cli-step-1-network-setup</id><content type="html" xml:base="/launch-ecs-container-aws-cli-step-1-network-setup/"><![CDATA[<p>Setup network infrastructure including new VPC (Virtual Private Cloud), public and private subnets, internet gateway, security group, and ssh access.</p>

<p>This is part of a multi-post thread involving these steps:</p>

<ol>
  <li>Network Setup (this post)</li>
  <li><a href="/launch-ecs-container-aws-cli-step-2-launch-ec2-instance">Launch EC2 Instance</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-3-create-docker-image">Create Docker Image</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-4-create-service">Create Service</a></li>
  <li><a href="/launch-ecs-container-aws-cli-step-5-cleanup">Cleanup</a></li>
</ol>

<p>Make sure you do this setup first:</p>

<ol>
  <li><a href="/setup-macos-for-aws-cloud-devops">Setup macOS for AWS Cloud DevOps</a></li>
  <li><a href="/aws-authentication">AWS Authentication</a></li>
</ol>

<h2 id="define-names">Define names</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VPC</span>
<span class="nv">vpc</span><span class="o">=</span><span class="s2">"vpc-ecs"</span>

<span class="c"># Subnets</span>
<span class="nv">subnet_1</span><span class="o">=</span><span class="s2">"subnet-ecs-1"</span>
<span class="nv">subnet_2</span><span class="o">=</span><span class="s2">"subnet-ecs-2"</span>

<span class="c"># Internet Gateway</span>
<span class="nv">internet_gateway</span><span class="o">=</span><span class="s2">"igw-ecs"</span>

<span class="c"># Route Table</span>
<span class="nv">route_table</span><span class="o">=</span><span class="s2">"rtb-ecs"</span>

<span class="c"># Security Group</span>
<span class="nv">security_group</span><span class="o">=</span><span class="s2">"security-ecs"</span>

<span class="c"># instance</span>
<span class="nv">instance</span><span class="o">=</span><span class="s2">"instance-ecs"</span>

<span class="c"># SSH access key</span>
<span class="nv">key</span><span class="o">=</span><span class="s2">"aws-ecs-key"</span>
</code></pre></div></div>

<h2 id="create-vpc">Create VPC</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VPC</span>

<span class="nb">echo</span> <span class="s2">"Create a VPC  (Virtual Private Cloud) ..."</span>

aws ec2 create-vpc <span class="se">\</span>
    <span class="nt">--cidr-block</span> 10.0.0.0/16  <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=vpc,Tags=[{Key=Name,Value='</span><span class="nv">$vpc</span><span class="s1">'}]'</span>

<span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>
</code></pre></div></div>

<h2 id="create-subnets">Create Subnets</h2>

<p>Create 2 subnets in the VPC. First subnet will be our public interface. The second subnet will be private.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Subnets</span>
<span class="nb">echo</span> <span class="s2">"Create subnet 1 ..."</span>

aws ec2 create-subnet <span class="se">\</span>
    <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
    <span class="nt">--cidr-block</span> 10.0.0.0/24 <span class="se">\</span>
    <span class="nt">--availability-zone</span> us-west-2a <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value='</span><span class="nv">$subnet_1</span><span class="s1">'}]'</span>  

<span class="nv">subnet_1_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"Create subnet 2 ..."</span>

aws ec2 create-subnet <span class="se">\</span>
    <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
    <span class="nt">--cidr-block</span> 10.0.1.0/24 <span class="se">\</span>
    <span class="nt">--availability-zone</span> us-west-2a <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value='</span><span class="nv">$subnet_2</span><span class="s1">'}]'</span>  

<span class="nv">subnet_2_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_2</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>

<span class="c">## Automatically assign Elastic IP address after launch to all instances in subnet 1 </span>
aws ec2 modify-subnet-attribute <span class="nt">--subnet-id</span> <span class="nv">$subnet_1_id</span> <span class="nt">--map-public-ip-on-launch</span>
</code></pre></div></div>

<h2 id="create-internet-gateway">Create Internet Gateway</h2>

<p>Create an Internet gateway and attach it to the VPC. An internet gateway allows communication between your VPC and the Internet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Internet Gateway</span>

<span class="nb">echo</span> <span class="s2">"Create Internet Gateway ..."</span>

aws ec2 create-internet-gateway <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=internet-gateway,Tags=[{Key=Name,Value='</span><span class="nv">$internet_gateway</span><span class="s1">'}]'</span> 

<span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>

<span class="c">## Attach to VPC</span>
aws ec2 attach-internet-gateway <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span>
</code></pre></div></div>

<h2 id="create-route-table">Create Route Table</h2>

<p>Create a route table, associate it with the public subnet, and add a route to allow all traffic to the Internet gateway.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Route Table</span>

<span class="nb">echo</span> <span class="s2">"Create Route Table ..."</span>

aws ec2 create-route-table <span class="se">\</span>
    <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=route-table,Tags=[{Key=Name,Value='</span><span class="nv">$route_table</span><span class="s1">'}]'</span> 

<span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>

<span class="c">## Associate with a subnet</span>
aws ec2 associate-route-table  <span class="nt">--subnet-id</span> <span class="nv">$subnet_1_id</span> <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span>

<span class="c">## Create a route in the route table that points all traffic (`0.0.0.0/0`) to the Internet gateway:</span>
aws ec2 create-route <span class="se">\</span>
    <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span> <span class="se">\</span>
    <span class="nt">--gateway-id</span> <span class="nv">$internet_gateway_id</span> <span class="se">\</span>
    <span class="nt">--destination-cidr-block</span> 0.0.0.0/0
</code></pre></div></div>

<h2 id="create-security-group">Create Security Group</h2>

<p>A <em>security group</em> controls the traffic that is allowed to reach and leave the resources that it is associated with. For example, after you associate a security group with a VPC, it controls the inbound and outbound traffic for the instances in the VPC.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Security Group</span>

<span class="nb">echo</span> <span class="s2">"Create a Security Group ..."</span>

aws ec2 create-security-group <span class="se">\</span>
    <span class="nt">--group-name</span> <span class="nv">$security_group</span> <span class="se">\</span>
    <span class="nt">--description</span> <span class="s2">"Security group for instance access"</span> <span class="se">\</span>
    <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
    <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=security-group,Tags=[{Key=Name,Value='</span><span class="nv">$security_group</span><span class="s1">'}]'</span> 
</code></pre></div></div>

<h2 id="allow-ssh-connections">Allow SSH Connections</h2>

<p>This is done by adding an ingress rule to the Security Group:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>

<span class="c"># Add a rule that allows SSH access from anywhere:</span>
aws ec2 authorize-security-group-ingress <span class="se">\</span>
    <span class="nt">--group-id</span> <span class="nv">$group_id</span> <span class="se">\</span>
    <span class="nt">--protocol</span> tcp <span class="nt">--port</span> 22 <span class="nt">--cidr</span> 0.0.0.0/0
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Setup network infrastructure including new VPC (Virtual Private Cloud), public and private subnets, internet gateway, security group, and ssh access. This is part of a multi-post thread involving these steps: Network Setup (this post) Launch EC2 Instance Create Docker Image Create Service Cleanup]]></summary></entry><entry><title type="html">Create an AWS EC2 instance with the AWS CLI</title><link href="/create-aws-ec2-instance-aws-cli/" rel="alternate" type="text/html" title="Create an AWS EC2 instance with the AWS CLI" /><published>2021-01-22T00:00:00-08:00</published><updated>2021-01-22T00:00:00-08:00</updated><id>/create-aws-ec2-instance-aws-cli</id><content type="html" xml:base="/create-aws-ec2-instance-aws-cli/"><![CDATA[<p>Make sure you do this setup first:</p>

<ol>
  <li><a href="/setup-macos-for-aws-cloud-devops">Setup macOS for AWS Cloud DevOps</a></li>
  <li><a href="/aws-authentication">AWS Authentication</a></li>
</ol>

<p>Steps:</p>

<ol>
  <li>Launch an AWS EC2 instance (this post)</li>
</ol>

<blockquote>
  <p>Scripts are <code class="language-plaintext highlighter-rouge">bash</code></p>
</blockquote>

<h2 id="setup">Setup</h2>

<h3 id="names">Names</h3>

<p>Assign resource names:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VPC</span>
<span class="nv">vpc</span><span class="o">=</span><span class="s2">"vpc-ec2"</span>

<span class="c"># Subnets</span>
<span class="nv">subnet_1</span><span class="o">=</span><span class="s2">"subnet-ec2-1"</span>
<span class="nv">subnet_2</span><span class="o">=</span><span class="s2">"subnet-ec2-2"</span>

<span class="c"># Internet Gateway</span>
<span class="nv">internet_gateway</span><span class="o">=</span><span class="s2">"igw-ec2"</span>

<span class="c"># Route Table</span>
<span class="nv">route_table</span><span class="o">=</span><span class="s2">"rtb-ec2"</span>

<span class="c"># Security Group</span>
<span class="nv">security_group</span><span class="o">=</span><span class="s2">"security-ec2"</span>

<span class="c"># instance</span>
<span class="nv">instance</span><span class="o">=</span><span class="s2">"instance-ec2"</span>

<span class="c"># SSH access key</span>
<span class="nv">key</span><span class="o">=</span><span class="s2">"aws-ec2-key"</span>
</code></pre></div></div>

<h3 id="vpc">VPC</h3>

<p>Create a VPC  (Virtual Private Cloud):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 create-vpc <span class="se">\</span>
  <span class="nt">--cidr-block</span> 10.0.0.0/16  <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=vpc,Tags=[{Key=Name,Value='</span><span class="nv">$vpc</span><span class="s1">'}]'</span>
</code></pre></div></div>

<h3 id="subnets">Subnets</h3>

<p>Create 2 subnets:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>

<span class="c"># 1st subnet</span>
aws ec2 create-subnet <span class="se">\</span>
  <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
  <span class="nt">--cidr-block</span> 10.0.0.0/24 <span class="se">\</span>
  <span class="nt">--availability-zone</span> us-west-2a <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value='</span><span class="nv">$subnet_1</span><span class="s1">'}]'</span>  

<span class="c"># 2nd subnet</span>
aws ec2 create-subnet <span class="se">\</span>
  <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
  <span class="nt">--cidr-block</span> 10.0.1.0/24 <span class="se">\</span>
  <span class="nt">--availability-zone</span> us-west-2a <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=subnet,Tags=[{Key=Name,Value='</span><span class="nv">$subnet_2</span><span class="s1">'}]'</span>  
</code></pre></div></div>

<p>Optionally modify the public IP addressing behavior of your subnet so that an instance launched into the subnet automatically receives a public IP address. Otherwise, you should associate an Elastic IP address with your instance after launch so that it’s reachable from the Internet.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
aws ec2 modify-subnet-attribute <span class="nt">--subnet-id</span> <span class="nv">$subnet_id</span> <span class="nt">--map-public-ip-on-launch</span>
</code></pre></div></div>

<h3 id="internet-gateway">Internet Gateway</h3>

<p>After you’ve created the VPC and subnets, you can make one of the subnets a public subnet by attaching an Internet gateway to your VPC, creating a custom route table, and configuring routing for the subnet to the Internet gateway.</p>

<h4 id="create">Create</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 create-internet-gateway <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=internet-gateway,Tags=[{Key=Name,Value='</span><span class="nv">$internet_gateway</span><span class="s1">'}]'</span> 
</code></pre></div></div>

<h4 id="attach-to-vpc">Attach to VPC</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>

<span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>

aws ec2 attach-internet-gateway <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span>
</code></pre></div></div>

<h3 id="route-table">Route Table</h3>

<p>Create:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>

aws ec2 create-route-table <span class="se">\</span>
  <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=route-table,Tags=[{Key=Name,Value='</span><span class="nv">$route_table</span><span class="s1">'}]'</span> 
</code></pre></div></div>

<p>Associate with a subnet:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1st subnet</span>
<span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>

<span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>

aws ec2 associate-route-table  <span class="nt">--subnet-id</span> <span class="nv">$subnet_id</span> <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span>
</code></pre></div></div>

<p>Create a route in the route table that points all traffic (<code class="language-plaintext highlighter-rouge">0.0.0.0/0</code>) to the Internet gateway:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>
<span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>

aws ec2 create-route <span class="se">\</span>
  <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span> <span class="se">\</span>
  <span class="nt">--gateway-id</span> <span class="nv">$internet_gateway_id</span> <span class="se">\</span>
  <span class="nt">--destination-cidr-block</span> 0.0.0.0/0
</code></pre></div></div>

<p>Confirm route is active:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>
aws ec2 describe-route-tables <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span>
</code></pre></div></div>

<h3 id="security-group">Security Group</h3>

<p>Create a security group in your VPC:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>

aws ec2 create-security-group <span class="se">\</span>
	<span class="nt">--group-name</span> <span class="nv">$security_group</span> <span class="se">\</span>
  <span class="nt">--description</span> <span class="s2">"Security group for instance access"</span> <span class="se">\</span>
  <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span> <span class="se">\</span>
  <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=security-group,Tags=[{Key=Name,Value='</span><span class="nv">$security_group</span><span class="s1">'}]'</span> 
</code></pre></div></div>

<p>Add a rule that allows SSH access from anywhere:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>
aws ec2 authorize-security-group-ingress <span class="se">\</span>
  <span class="nt">--group-id</span> <span class="nv">$group_id</span> <span class="se">\</span>
  <span class="nt">--protocol</span> tcp <span class="nt">--port</span> 22 <span class="nt">--cidr</span> 0.0.0.0/0
</code></pre></div></div>

<h3 id="ec2-instance">EC2 Instance</h3>

<p>List Amazon Linux images (via System Manager):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ssm get-parameters-by-path <span class="nt">--path</span> /aws/service/ami-amazon-linux-latest <span class="nt">--query</span> <span class="s2">"Parameters[].Name"</span>
</code></pre></div></div>

<p>Launch instance:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
<span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>

aws ec2 run-instances <span class="se">\</span>
  <span class="nt">--subnet-id</span> <span class="nv">$subnet_id</span> <span class="se">\</span>
  <span class="nt">--security-group-ids</span> <span class="nv">$group_id</span> <span class="se">\</span>
  <span class="nt">--image-id</span> resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 <span class="se">\</span>
  <span class="nt">--instance-type</span> t2.micro <span class="se">\</span>
  <span class="nt">--count</span> 1 <span class="se">\</span>
  <span class="nt">--key-name</span> <span class="nv">$key</span> <span class="se">\</span>
   <span class="nt">--tag-specifications</span> <span class="s1">'ResourceType=instance,Tags=[{Key=Name,Value='</span><span class="nv">$instance</span><span class="s1">'}]'</span>
</code></pre></div></div>

<p>Check instance status. Wait until it is <code class="language-plaintext highlighter-rouge">running</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">instance_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$instance</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].InstanceId'</span><span class="si">)</span>
aws ec2 describe-instances <span class="nt">--instance-id</span> <span class="nv">$instance_id</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].State'</span>
</code></pre></div></div>

<p>Login into the instance:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">instance_public_ip</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$instance</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].PublicIpAddress'</span><span class="si">)</span>
ssh <span class="nt">-i</span> ~/.ssh/<span class="nv">$key</span> ec2-user@<span class="nv">$instance_public_ip</span>
</code></pre></div></div>

<h2 id="clean-up">Clean up</h2>

<p>Delete all resources in reverse order of creation.</p>

<h3 id="ec2-instance-1">EC2 Instance</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">instance_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$instance</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].InstanceId'</span><span class="si">)</span>
aws ec2 terminate-instances <span class="nt">--instance-ids</span> <span class="nv">$instance_id</span>
</code></pre></div></div>

<p>Check instance status. Wait until it is <code class="language-plaintext highlighter-rouge">terminated</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 describe-instances <span class="nt">--instance-id</span> <span class="nv">$instance_id</span> | jq <span class="nt">-r</span> <span class="s1">'.Reservations[0].Instances[0].State'</span>
</code></pre></div></div>

<h3 id="security-group-1">Security Group</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">group_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-security-groups <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$security_group</span> | jq <span class="nt">-r</span> <span class="s1">'.SecurityGroups[0].GroupId'</span><span class="si">)</span>
aws ec2 delete-security-group <span class="nt">--group-id</span> <span class="nv">$group_id</span>
</code></pre></div></div>

<h3 id="subnets-1">Subnets</h3>

<p>Delete:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1st subnet</span>
<span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_1</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
aws ec2 delete-subnet <span class="nt">--subnet-id</span> <span class="nv">$subnet_id</span>

<span class="c"># 2nd subnet</span>
<span class="nv">subnet_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-subnets <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$subnet_2</span> | jq <span class="nt">-r</span> <span class="s1">'.Subnets[0].SubnetId'</span><span class="si">)</span>
aws ec2 delete-subnet <span class="nt">--subnet-id</span> <span class="nv">$subnet_id</span>
</code></pre></div></div>

<h3 id="route-table-1">Route Table</h3>

<p>Delete:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">route_table_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-route-tables <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$route_table</span> | jq <span class="nt">-r</span> <span class="s1">'.RouteTables[0].RouteTableId'</span><span class="si">)</span>
aws ec2 delete-route-table <span class="nt">--route-table-id</span> <span class="nv">$route_table_id</span>
</code></pre></div></div>

<h3 id="internet-gateway-1">Internet Gateway</h3>

<p>Detach:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>

<span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>

aws ec2 detach-internet-gateway <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span> <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span>
</code></pre></div></div>

<p>Delete:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">internet_gateway_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-internet-gateways <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$internet_gateway</span> | jq <span class="nt">-r</span> <span class="s1">'.InternetGateways[0].InternetGatewayId'</span><span class="si">)</span>
aws ec2 delete-internet-gateway <span class="nt">--internet-gateway-id</span> <span class="nv">$internet_gateway_id</span>
</code></pre></div></div>

<h3 id="vpc-1">VPC</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">vpc_id</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-vpcs <span class="nt">--filters</span> <span class="nv">Name</span><span class="o">=</span>tag:Name,Values<span class="o">=</span><span class="nv">$vpc</span> | jq <span class="nt">-r</span> <span class="s1">'.Vpcs[0].VpcId'</span><span class="si">)</span>
aws ec2 delete-vpc <span class="nt">--vpc-id</span> <span class="nv">$vpc_id</span>
</code></pre></div></div>]]></content><author><name>Swift Software Group</name></author><category term="cloud" /><category term="aws" /><summary type="html"><![CDATA[Make sure you do this setup first: Setup macOS for AWS Cloud DevOps AWS Authentication Steps: Launch an AWS EC2 instance (this post)]]></summary></entry></feed>